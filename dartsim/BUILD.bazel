load(
    "@gz//bazel/skylark:build_defs.bzl",
    "GZ_ROOT",
    "GZ_VISIBILITY",
    "gz_configure_header",
    "gz_export_header",
    "gz_include_header",
)

public_headers = ["include/gz/physics/dartsim/World.hh"]

private_headers = glob(["src/*.hh"])

sources = glob(
    ["src/*.cc"],
    exclude = [
        "src/*_TEST.cc",
        "src/plugin.cc",
    ],
)

cc_library(
    name = "dartsim",
    srcs = sources + private_headers,
    hdrs = public_headers,
    includes = ["include"],
    visibility = GZ_VISIBILITY,
    deps = [
        GZ_ROOT + "common",
        GZ_ROOT + "common/geospatial",
        GZ_ROOT + "common/profiler",
        GZ_ROOT + "math/eigen3",
        GZ_ROOT + "physics",
        GZ_ROOT + "physics:heightmap",
        GZ_ROOT + "physics:mesh",
        GZ_ROOT + "physics:sdf",
        GZ_ROOT + "third_party/dart:simulation",
        GZ_ROOT + "third_party/dart:collision-bullet",
        GZ_ROOT + "third_party/dart:collision-ode",
    ],
)

cc_binary(
    name = "libgz-physics-dartsim-plugin.so",
    srcs = [
        "src/plugin.cc",
    ],
    linkshared = True,
    visibility = GZ_VISIBILITY,
    deps = [
        ":dartsim",
        GZ_ROOT + "plugin:register",
    ],
)

test_sources = glob(["src/*_TEST.cc"])

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    copts = ["-fexceptions"],
    data = [
        "worlds",
        ":libgz-physics-dartsim-plugin.so",
        GZ_ROOT + "physics/test:resources",
    ],
    includes = ["src"],
    local_defines = [
        "TEST_WORLD_DIR='\"physics/dartsim/worlds/\"'",
        "GZ_PHYSICS_RESOURCE_DIR='\"physics/test/resources/\"'",
    ],
    deps = [
        GZ_ROOT + "common/geospatial",
        GZ_ROOT + "math/eigen3",
        GZ_ROOT + "physics",
        GZ_ROOT + "physics/test:common_test",
        ":dartsim",
        "@gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]
