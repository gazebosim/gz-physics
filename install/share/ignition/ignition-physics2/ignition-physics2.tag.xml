<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>BoxShape.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>BoxShape_8hh</filename>
    <includes id="DeclareShapeType_8hh" name="DeclareShapeType.hh" local="no" imported="no">ignition/physics/DeclareShapeType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AttachBoxShapeFeature</class>
    <class kind="class">ignition::physics::SetBoxShapeProperties::BoxShape</class>
    <class kind="class">ignition::physics::AttachBoxShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::SetBoxShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::AttachBoxShapeFeature::Link</class>
    <class kind="class">ignition::physics::SetBoxShapeProperties</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aa7af3458cc3adaeee0f4e52827ac935d</anchor>
      <arglist>(BoxShape) class GetBoxShapeProperties</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CanReadData.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>CanReadData_8hh</filename>
    <includes id="OperateOnSpecifiedData_8hh" name="OperateOnSpecifiedData.hh" local="yes" imported="no">ignition/physics/OperateOnSpecifiedData.hh</includes>
    <class kind="class">ignition::physics::CanReadExpectedData</class>
    <class kind="class">ignition::physics::CanReadRequiredData</class>
    <class kind="struct">ignition::physics::ReadOptions</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>CanWriteData.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>CanWriteData_8hh</filename>
    <includes id="OperateOnSpecifiedData_8hh" name="OperateOnSpecifiedData.hh" local="yes" imported="no">ignition/physics/OperateOnSpecifiedData.hh</includes>
    <class kind="class">ignition::physics::CanWriteExpectedData</class>
    <class kind="class">ignition::physics::CanWriteRequiredData</class>
    <class kind="struct">ignition::physics::WriteOptions</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>Cloneable.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Cloneable_8hh</filename>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeData.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>CompositeData_8hh</filename>
    <includes id="Cloneable_8hh" name="Cloneable.hh" local="yes" imported="no">ignition/physics/Cloneable.hh</includes>
    <class kind="class">ignition::physics::CompositeData</class>
    <class kind="struct">ignition::physics::CompositeData::DataStatus</class>
    <class kind="struct">ignition::physics::CompositeData::InsertResult</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructCollision.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/sdf/include/ignition/physics/sdf/</path>
    <filename>ConstructCollision_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::sdf::ConstructSdfCollision</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfCollision::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfCollision::Link</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::sdf</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructEmpty.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>ConstructEmpty_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::ConstructEmptyLinkFeature</class>
    <class kind="class">ignition::physics::ConstructEmptyModelFeature</class>
    <class kind="class">ignition::physics::ConstructEmptyWorldFeature</class>
    <class kind="class">ignition::physics::ConstructEmptyWorldFeature::Engine</class>
    <class kind="class">ignition::physics::ConstructEmptyLinkFeature::Implementation</class>
    <class kind="class">ignition::physics::ConstructEmptyModelFeature::Implementation</class>
    <class kind="class">ignition::physics::ConstructEmptyWorldFeature::Implementation</class>
    <class kind="class">ignition::physics::ConstructEmptyLinkFeature::Model</class>
    <class kind="class">ignition::physics::ConstructEmptyModelFeature::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructJoint.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/sdf/include/ignition/physics/sdf/</path>
    <filename>ConstructJoint_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::sdf::ConstructSdfJoint</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfJoint::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfJoint::Model</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::sdf</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructLink.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/sdf/include/ignition/physics/sdf/</path>
    <filename>ConstructLink_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::sdf::ConstructSdfLink</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfLink::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfLink::Model</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::sdf</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructModel.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/sdf/include/ignition/physics/sdf/</path>
    <filename>ConstructModel_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::sdf::ConstructSdfModel</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfModel::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfModel::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::sdf</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructVisual.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/sdf/include/ignition/physics/sdf/</path>
    <filename>ConstructVisual_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::sdf::ConstructSdfVisual</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfVisual::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfVisual::Link</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::sdf</namespace>
  </compound>
  <compound kind="file">
    <name>ConstructWorld.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/sdf/include/ignition/physics/sdf/</path>
    <filename>ConstructWorld_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::sdf::ConstructSdfWorld</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfWorld::Engine</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfWorld::Implementation</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::sdf</namespace>
  </compound>
  <compound kind="file">
    <name>CylinderShape.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>CylinderShape_8hh</filename>
    <includes id="DeclareShapeType_8hh" name="DeclareShapeType.hh" local="no" imported="no">ignition/physics/DeclareShapeType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AttachCylinderShapeFeature</class>
    <class kind="class">ignition::physics::SetCylinderShapeProperties::CylinderShape</class>
    <class kind="class">ignition::physics::AttachCylinderShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::SetCylinderShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::AttachCylinderShapeFeature::Link</class>
    <class kind="class">ignition::physics::SetCylinderShapeProperties</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a319475aed38337d9a14000b4d6abaf34</anchor>
      <arglist>(CylinderShape) class GetCylinderShapeProperties</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataStatusMask.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>DataStatusMask_8hh</filename>
    <includes id="CompositeData_8hh" name="CompositeData.hh" local="yes" imported="no">ignition/physics/CompositeData.hh</includes>
    <class kind="struct">ignition::physics::DataStatusMask</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>DeclareJointType.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>DeclareJointType_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PHYSICS_DECLARE_JOINT_TYPE</name>
      <anchorfile>DeclareJointType_8hh.html</anchorfile>
      <anchor>a66cc973de6ebd629cc732ec6fb19e459</anchor>
      <arglist>(CustomJointType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DeclareShapeType.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>DeclareShapeType_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>DeclareShapeType_8hh.html</anchorfile>
      <anchor>af0113ae2b72c7bd9495457f19e239b46</anchor>
      <arglist>(CustomShapeType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Entity.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Entity_8hh</filename>
    <class kind="class">ignition::physics::Entity</class>
    <class kind="class">ignition::physics::EntityPtr</class>
    <class kind="struct">ignition::physics::RequestFeatures</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="variable">
      <type>const std::size_t</type>
      <name>INVALID_ENTITY_ID</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5bb1ac88b5af298f6c217de8f8ce2251</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Feature.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Feature_8hh</filename>
    <includes id="Entity_8hh" name="Entity.hh" local="no" imported="no">ignition/physics/Entity.hh</includes>
    <class kind="class">ignition::physics::Feature::Engine</class>
    <class kind="class">ignition::physics::Feature</class>
    <class kind="class">ignition::physics::Feature::Implementation</class>
    <class kind="class">ignition::physics::Feature::Joint</class>
    <class kind="class">ignition::physics::Feature::Link</class>
    <class kind="class">ignition::physics::Feature::Model</class>
    <class kind="class">ignition::physics::Feature::Shape</class>
    <class kind="class">ignition::physics::Feature::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>FeatureList.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FeatureList_8hh</filename>
    <includes id="Feature_8hh" name="Feature.hh" local="no" imported="no">ignition/physics/Feature.hh</includes>
    <class kind="struct">ignition::physics::FeatureList</class>
    <class kind="struct">ignition::physics::FeatureWithConflicts</class>
    <class kind="struct">ignition::physics::FeatureWithRequirements</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>FeaturePolicy.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FeaturePolicy_8hh</filename>
    <class kind="struct">ignition::physics::FeaturePolicy</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="typedef">
      <type>FeaturePolicy&lt; double, 2 &gt;</type>
      <name>FeaturePolicy2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7cd42d0635def62ac0d7715f1cb1c9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; float, 2 &gt;</type>
      <name>FeaturePolicy2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a1094ed03fe553cec0b27adbdac6fbe0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; double, 3 &gt;</type>
      <name>FeaturePolicy3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7f245b484b6675dbb78f5b1aa68790b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; float, 3 &gt;</type>
      <name>FeaturePolicy3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae1e75047af2f607c9f079eaef6496351</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindFeatures.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FindFeatures_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="struct">ignition::physics::FindFeatures</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy2d, FeatureListT &gt;</type>
      <name>FindFeatures2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a18644628a59c115ad11d8e14619f55b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy2f, FeatureListT &gt;</type>
      <name>FindFeatures2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>afc7adb1b82e6f20e8d47ba9953704257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy3d, FeatureListT &gt;</type>
      <name>FindFeatures3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2acb7c46a3861eabf318669f4267b1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy3f, FeatureListT &gt;</type>
      <name>FindFeatures3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ac56231e72971f43e72b8c39968873009</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixedJoint.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FixedJoint_8hh</filename>
    <includes id="DeclareJointType_8hh" name="DeclareJointType.hh" local="no" imported="no">ignition/physics/DeclareJointType.hh</includes>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_JOINT_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>adbf43bc07f35927a8f022e1dc0e5a3ba</anchor>
      <arglist>(FixedJoint) class AttachFixedJointFeature</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForwardStep.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>ForwardStep_8hh</filename>
    <includes id="SpecifyData_8hh" name="SpecifyData.hh" local="no" imported="no">ignition/physics/SpecifyData.hh</includes>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="struct">ignition::physics::ApplyExternalForceTorques</class>
    <class kind="struct">ignition::physics::ApplyGeneralizedForces</class>
    <class kind="struct">ignition::physics::Contacts</class>
    <class kind="struct">ignition::physics::ForceTorque</class>
    <class kind="class">ignition::physics::ForwardStep</class>
    <class kind="struct">ignition::physics::FreeVector</class>
    <class kind="struct">ignition::physics::GeneralizedParameters</class>
    <class kind="class">ignition::physics::ForwardStep::Implementation</class>
    <class kind="struct">ignition::physics::JointPositions</class>
    <class kind="struct">ignition::physics::PIDValues</class>
    <class kind="struct">ignition::physics::Point</class>
    <class kind="struct">ignition::physics::ServoControlCommands</class>
    <class kind="struct">ignition::physics::TimeStep</class>
    <class kind="struct">ignition::physics::VelocityControlCommands</class>
    <class kind="class">ignition::physics::ForwardStep::World</class>
    <class kind="struct">ignition::physics::WorldPose</class>
    <class kind="struct">ignition::physics::WorldPoses</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>FrameData.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FrameData_8hh</filename>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="struct">ignition::physics::FrameData</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a17ccd61faa5df353d2077d232e68f790</anchor>
      <arglist>(FrameData) template&lt; typename Scalar</arglist>
    </member>
    <member kind="function">
      <type>std::size_t Dim std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a6bb190b563861a9f47187e5e2a668a68</anchor>
      <arglist>(std::ostream &amp;stream, const FrameData&lt; Scalar, Dim &gt; &amp;_frame)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameID.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FrameID_8hh</filename>
    <class kind="class">ignition::physics::FrameID</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>FrameSemantics.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FrameSemantics_8hh</filename>
    <includes id="Feature_8hh" name="Feature.hh" local="no" imported="no">ignition/physics/Feature.hh</includes>
    <includes id="Entity_8hh" name="Entity.hh" local="no" imported="no">ignition/physics/Entity.hh</includes>
    <includes id="FrameID_8hh" name="FrameID.hh" local="no" imported="no">ignition/physics/FrameID.hh</includes>
    <includes id="FrameData_8hh" name="FrameData.hh" local="no" imported="no">ignition/physics/FrameData.hh</includes>
    <includes id="RelativeQuantity_8hh" name="RelativeQuantity.hh" local="no" imported="no">ignition/physics/RelativeQuantity.hh</includes>
    <class kind="class">ignition::physics::CompleteFrameSemantics</class>
    <class kind="class">ignition::physics::FrameSemantics::Engine</class>
    <class kind="class">ignition::physics::FrameSemantics::Frame</class>
    <class kind="class">ignition::physics::FrameSemantics::Frame</class>
    <class kind="class">ignition::physics::FrameSemantics</class>
    <class kind="class">ignition::physics::FrameSemantics::Implementation</class>
    <class kind="class">ignition::physics::JointFrameSemantics</class>
    <class kind="class">ignition::physics::LinkFrameSemantics</class>
    <class kind="class">ignition::physics::ModelFrameSemantics</class>
    <class kind="class">ignition::physics::ShapeFrameSemantics</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>FreeGroup.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FreeGroup_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="FrameSemantics_8hh" name="FrameSemantics.hh" local="no" imported="no">ignition/physics/FrameSemantics.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::SetFreeGroupWorldVelocity::FreeGroup</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldPose::FreeGroup</class>
    <class kind="class">ignition::physics::FreeGroupFrameSemantics</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldVelocity::Implementation</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldPose::Implementation</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldPose</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldVelocity</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>FreeJoint.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>FreeJoint_8hh</filename>
    <includes id="DeclareJointType_8hh" name="DeclareJointType.hh" local="no" imported="no">ignition/physics/DeclareJointType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>Geometry.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Geometry_8hh</filename>
    <class kind="struct">ignition::physics::FromPolicy</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DETAIL_IGN_PHYSICS_MAKE_BOTH_PRECISIONS</name>
      <anchorfile>Geometry_8hh.html</anchorfile>
      <anchor>a83e8416b9ff5ca4860608051b44fb44d</anchor>
      <arglist>(Type, Dim)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>Geometry_8hh.html</anchorfile>
      <anchor>a096b43ed88e0537a64f259b94982ec0c</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::AlignedBox&lt; Scalar, Dim &gt;</type>
      <name>AlignedBox</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aabdb046f916193a8bf05c96e5dc66345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 2 &gt;</type>
      <name>AlignedBox2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ac682344c3c020883aa86b5556e2e8379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 2 &gt;</type>
      <name>AlignedBox2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a8111560db08383ed8cc6b4fbed09fd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 3 &gt;</type>
      <name>AlignedBox3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aa67a31d586dee3418718784aca5e6e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 3 &gt;</type>
      <name>AlignedBox3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae04e40fdf427014257f71fd9b75160ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Scalar,(Dim *(Dim-1))/2 &gt;</type>
      <name>AngularVector</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ab4060336133c468fbfa25c6498fe65d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; double, 2 &gt;</type>
      <name>AngularVector2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a3ab40bedaae7138f210723b6cc94f1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; float, 2 &gt;</type>
      <name>AngularVector2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ab32845b11f09464d7edc5338c4a9956f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; double, 3 &gt;</type>
      <name>AngularVector3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a8fe04e039fb41916136883b26a803e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; float, 3 &gt;</type>
      <name>AngularVector3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aeaacb19c1583816b998825e9c0621b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Scalar, Dim &gt;</type>
      <name>LinearVector</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a0691de79072243de2344d7130dc4d0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; double, 2 &gt;</type>
      <name>LinearVector2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7f1a85b1333ccb3cfda0f4e47a38f42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; float, 2 &gt;</type>
      <name>LinearVector2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a43fcc183038b8ca280a3714dc5e4f043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; double, 3 &gt;</type>
      <name>LinearVector3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ad5ed379816e97817c1814790a9155b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; float, 3 &gt;</type>
      <name>LinearVector3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a81f09df5f47bb2cbbb702f869a9a0e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Transform&lt; Scalar, Dim, Eigen::Isometry &gt;</type>
      <name>Pose</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7dc8ee1191001fe2671afbf62ff4b4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; double, 2 &gt;</type>
      <name>Pose2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a568326d1dd4ae14bcf25889d2bdb1631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; float, 2 &gt;</type>
      <name>Pose2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aaf987914b31e82106cfa5a7d75fd0a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; double, 3 &gt;</type>
      <name>Pose3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a4c0a0ae91e6f6974863d4b31ff798d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; float, 3 &gt;</type>
      <name>Pose3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae4735c9b393853eb1335dc87d86fc82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>Vector</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7daf55236ee43a9936138efa7ef99efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; double, 2 &gt;</type>
      <name>Vector2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a655a98477c685806cfb2d16fa39f25e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; float, 2 &gt;</type>
      <name>Vector2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ad22adf6f757c85af1be5f78430137648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; double, 3 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a9e26d86ebadc4c4a3ac350153ca1a739</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; float, 3 &gt;</type>
      <name>Vector3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a208fc8e24bbd504517d365e91a99bece</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2D&lt; Scalar &gt;</type>
      <name>Rotate</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a80d56f7c1246f8bcba606357bf0ca83c</anchor>
      <arglist>(const Scalar &amp;_angle, const AngularVector&lt; Scalar, 2 &gt; &amp;_axis)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::AngleAxis&lt; Scalar &gt;</type>
      <name>Rotate</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a61ee8362b4dde5bff841283d2a1f1709</anchor>
      <arglist>(const Scalar &amp;_angle, const AngularVector&lt; Scalar, 3 &gt; &amp;_axis)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GetBoundingBox.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>GetBoundingBox_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="FrameSemantics_8hh" name="FrameSemantics.hh" local="no" imported="no">ignition/physics/FrameSemantics.hh</includes>
    <includes id="GetEntities_8hh" name="GetEntities.hh" local="no" imported="no">ignition/physics/GetEntities.hh</includes>
    <includes id="Shape_8hh" name="Shape.hh" local="no" imported="no">ignition/physics/Shape.hh</includes>
    <class kind="class">ignition::physics::GetLinkBoundingBox</class>
    <class kind="class">ignition::physics::GetModelBoundingBox</class>
    <class kind="class">ignition::physics::GetLinkBoundingBox::Link</class>
    <class kind="class">ignition::physics::GetModelBoundingBox::Model</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="typedef">
      <type>FeatureList&lt; GetShapeBoundingBox, GetShapeFromLink, LinkFrameSemantics &gt;</type>
      <name>GetLinkBoundingBoxRequiredFeatures</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5d7c9b11e673f739dd3e7c4bb2925073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeatureList&lt; GetLinkBoundingBox, GetLinkFromModel, ModelFrameSemantics &gt;</type>
      <name>GetModelBoundingBoxRequiredFeatures</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae3ce83244250e9ee81bb60ed40072b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GetContacts.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>GetContacts_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="ForwardStep_8hh" name="ForwardStep.hh" local="no" imported="no">ignition/physics/ForwardStep.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <includes id="SpecifyData_8hh" name="SpecifyData.hh" local="no" imported="no">ignition/physics/SpecifyData.hh</includes>
    <class kind="struct">ignition::physics::GetContactsFromLastStepFeature::Implementation::ContactInternal</class>
    <class kind="struct">ignition::physics::GetContactsFromLastStepFeature::World::ContactPoint</class>
    <class kind="struct">ignition::physics::GetContactsFromLastStepFeature::ExtraContactDataT</class>
    <class kind="class">ignition::physics::GetContactsFromLastStepFeature</class>
    <class kind="class">ignition::physics::GetContactsFromLastStepFeature::Implementation</class>
    <class kind="class">ignition::physics::GetContactsFromLastStepFeature::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>GetEntities.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>GetEntities_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::GetWorldFromEngine::Engine</class>
    <class kind="class">ignition::physics::GetEngineInfo::Engine</class>
    <class kind="class">ignition::physics::GetEngineInfo</class>
    <class kind="struct">ignition::physics::GetEntities</class>
    <class kind="class">ignition::physics::GetJointFromModel</class>
    <class kind="class">ignition::physics::GetLinkFromModel</class>
    <class kind="class">ignition::physics::GetModelFromWorld</class>
    <class kind="class">ignition::physics::GetShapeFromLink</class>
    <class kind="class">ignition::physics::GetWorldFromEngine</class>
    <class kind="class">ignition::physics::GetShapeFromLink::Implementation</class>
    <class kind="class">ignition::physics::GetJointFromModel::Implementation</class>
    <class kind="class">ignition::physics::GetLinkFromModel::Implementation</class>
    <class kind="class">ignition::physics::GetModelFromWorld::Implementation</class>
    <class kind="class">ignition::physics::GetWorldFromEngine::Implementation</class>
    <class kind="class">ignition::physics::GetEngineInfo::Implementation</class>
    <class kind="class">ignition::physics::GetJointFromModel::Joint</class>
    <class kind="class">ignition::physics::GetShapeFromLink::Link</class>
    <class kind="class">ignition::physics::GetLinkFromModel::Link</class>
    <class kind="class">ignition::physics::GetJointFromModel::Model</class>
    <class kind="class">ignition::physics::GetLinkFromModel::Model</class>
    <class kind="class">ignition::physics::GetModelFromWorld::Model</class>
    <class kind="class">ignition::physics::GetShapeFromLink::Shape</class>
    <class kind="class">ignition::physics::GetModelFromWorld::World</class>
    <class kind="class">ignition::physics::GetWorldFromEngine::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>Implements.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Implements_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="FeaturePolicy_8hh" name="FeaturePolicy.hh" local="no" imported="no">ignition/physics/FeaturePolicy.hh</includes>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="typedef">
      <type>detail::ExtractImplementation&lt; PolicyT, FeatureListT &gt;</type>
      <name>Implements</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2d96f4e9c1426d8a61da147434b61d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy2d, FeatureListT &gt;</type>
      <name>Implements2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a25e9a4891662ae646a5a6a039ed01298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy2f, FeatureListT &gt;</type>
      <name>Implements2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a12f903b422a017c8649917ff2ec6b3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy3d, FeatureListT &gt;</type>
      <name>Implements3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a6d38e59cc9ee7d1edeb9af2205aac83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy3f, FeatureListT &gt;</type>
      <name>Implements3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a8d5b4a97a1a1e5f69c4f286f7cd95d27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Joint.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Joint_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::DetachJointFeature</class>
    <class kind="class">ignition::physics::GetBasicJointProperties</class>
    <class kind="class">ignition::physics::GetBasicJointState</class>
    <class kind="class">ignition::physics::DetachJointFeature::Implementation</class>
    <class kind="class">ignition::physics::SetJointVelocityCommandFeature::Implementation</class>
    <class kind="class">ignition::physics::SetJointTransformToChildFeature::Implementation</class>
    <class kind="class">ignition::physics::SetJointTransformFromParentFeature::Implementation</class>
    <class kind="class">ignition::physics::GetBasicJointProperties::Implementation</class>
    <class kind="class">ignition::physics::SetBasicJointState::Implementation</class>
    <class kind="class">ignition::physics::GetBasicJointState::Implementation</class>
    <class kind="class">ignition::physics::DetachJointFeature::Joint</class>
    <class kind="class">ignition::physics::SetJointVelocityCommandFeature::Joint</class>
    <class kind="class">ignition::physics::SetJointTransformToChildFeature::Joint</class>
    <class kind="class">ignition::physics::SetJointTransformFromParentFeature::Joint</class>
    <class kind="class">ignition::physics::GetBasicJointProperties::Joint</class>
    <class kind="class">ignition::physics::SetBasicJointState::Joint</class>
    <class kind="class">ignition::physics::GetBasicJointState::Joint</class>
    <class kind="class">ignition::physics::SetBasicJointState</class>
    <class kind="class">ignition::physics::SetJointTransformFromParentFeature</class>
    <class kind="class">ignition::physics::SetJointTransformToChildFeature</class>
    <class kind="class">ignition::physics::SetJointVelocityCommandFeature</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>Link.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Link_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="FrameID_8hh" name="FrameID.hh" local="no" imported="no">ignition/physics/FrameID.hh</includes>
    <includes id="FrameSemantics_8hh" name="FrameSemantics.hh" local="no" imported="no">ignition/physics/FrameSemantics.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AddLinkExternalForceTorque</class>
    <class kind="class">ignition::physics::AddLinkExternalForceTorque::Implementation</class>
    <class kind="class">ignition::physics::AddLinkExternalForceTorque::Link</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>MeshShape.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/mesh/include/ignition/physics/mesh/</path>
    <filename>MeshShape_8hh</filename>
    <includes id="DeclareShapeType_8hh" name="DeclareShapeType.hh" local="no" imported="no">ignition/physics/DeclareShapeType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::mesh::AttachMeshShapeFeature</class>
    <class kind="class">ignition::physics::mesh::AttachMeshShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::mesh::SetMeshShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::mesh::AttachMeshShapeFeature::Link</class>
    <class kind="class">ignition::physics::mesh::SetMeshShapeProperties::MeshShape</class>
    <class kind="class">ignition::physics::mesh::SetMeshShapeProperties</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::mesh</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics_1_1mesh.html</anchorfile>
      <anchor>a28c06347369c712fbf97eac04a789a4d</anchor>
      <arglist>(MeshShape) class GetMeshShapeProperties</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OperateOnSpecifiedData.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>OperateOnSpecifiedData_8hh</filename>
    <includes id="SpecifyData_8hh" name="SpecifyData.hh" local="yes" imported="no">ignition/physics/SpecifyData.hh</includes>
    <includes id="DataStatusMask_8hh" name="DataStatusMask.hh" local="yes" imported="no">ignition/physics/DataStatusMask.hh</includes>
    <class kind="class">ignition::physics::OperateOnSpecifiedData</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>PlaneShape.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>PlaneShape_8hh</filename>
    <includes id="DeclareShapeType_8hh" name="DeclareShapeType.hh" local="no" imported="no">ignition/physics/DeclareShapeType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AttachPlaneShapeFeature</class>
    <class kind="class">ignition::physics::AttachPlaneShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::SetPlaneShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::AttachPlaneShapeFeature::Link</class>
    <class kind="class">ignition::physics::SetPlaneShapeProperties::PlaneShape</class>
    <class kind="class">ignition::physics::SetPlaneShapeProperties</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a0a25a29f2326fdac9aea5bc5d3c53715</anchor>
      <arglist>(PlaneShape) class GetPlaneShapeProperties</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJoint.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>PrismaticJoint_8hh</filename>
    <includes id="DeclareJointType_8hh" name="DeclareJointType.hh" local="no" imported="no">ignition/physics/DeclareJointType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AttachPrismaticJointFeature</class>
    <class kind="class">ignition::physics::AttachPrismaticJointFeature::Implementation</class>
    <class kind="class">ignition::physics::SetPrismaticJointProperties::Implementation</class>
    <class kind="class">ignition::physics::AttachPrismaticJointFeature::Link</class>
    <class kind="class">ignition::physics::SetPrismaticJointProperties::PrismaticJoint</class>
    <class kind="class">ignition::physics::SetPrismaticJointProperties</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>Register.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Register_8hh</filename>
    <includes id="Implements_8hh" name="Implements.hh" local="no" imported="no">ignition/physics/Implements.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PHYSICS_ADD_PLUGIN</name>
      <anchorfile>Register_8hh.html</anchorfile>
      <anchor>a983192a469b717a9c981c80aaa971aae</anchor>
      <arglist>(PluginType, FeaturePolicyT, FeatureListT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RegisterMore.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>RegisterMore_8hh</filename>
    <includes id="Register_8hh" name="Register.hh" local="no" imported="no">ignition/physics/Register.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PLUGIN_REGISTER_MORE_TRANS_UNITS</name>
      <anchorfile>RegisterMore_8hh.html</anchorfile>
      <anchor>ad73a37ebd3243370668c0b397bc2bdcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RelativeQuantity.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>RelativeQuantity_8hh</filename>
    <includes id="FrameID_8hh" name="FrameID.hh" local="no" imported="no">ignition/physics/FrameID.hh</includes>
    <includes id="FrameData_8hh" name="FrameData.hh" local="no" imported="no">ignition/physics/FrameData.hh</includes>
    <class kind="class">ignition::physics::RelativeQuantity</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="typedef">
      <type>RelativeQuantity&lt; AlignedBox&lt; Scalar, Dim &gt;, Dim, detail::AABBSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativeAlignedBox</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2f019b8d20b66b71c0e7022f9205ee03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; LinearVector&lt; Scalar, Dim &gt;, Dim, detail::VectorSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativeForce</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5990c116035c799fb66eb8163bf0abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; FrameData&lt; Scalar, Dim &gt;, Dim, detail::FrameSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativeFrameData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2f59bd53dab678e9c842e20237b8a0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; Pose&lt; Scalar, Dim &gt;, Dim, detail::SESpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativePose</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>afead8dc9356f30a639d52b74045c4168</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; LinearVector&lt; Scalar, Dim &gt;, Dim, detail::EuclideanSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativePosition</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5d84d3565d1c139ef85cf753049fca2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuaternion&lt; double &gt;</type>
      <name>RelativeQuaterniond</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a09e13c8343225b21cc0dd8d392fb0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuaternion&lt; float &gt;</type>
      <name>RelativeQuaternionf</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a3feb9be9d32212270e38a7f82c947ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; Eigen::Matrix&lt; Scalar, Dim, Dim &gt;, Dim, detail::SOSpace&lt; Scalar, Dim, Eigen::Matrix&lt; Scalar, Dim, Dim &gt; &gt;&gt;</type>
      <name>RelativeRotationMatrix</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a9399f0198f42993c872b8d2198391eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; AngularVector&lt; Scalar, Dim &gt;, Dim, detail::VectorSpace&lt; Scalar,(Dim *(Dim-1))/2 &gt; &gt;</type>
      <name>RelativeTorque</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a727871ed79f3ecac727b77dcc4a9f02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2964310d2053413be3ed55f936545697</anchor>
      <arglist>(RelativePose) template&lt; typename Scalar</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a3b86091601e395732378f9c81010334d</anchor>
      <arglist>(RelativeRotationMatrix) template&lt; typename Scalar &gt; using RelativeQuaternion</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7c93ff34702da4a466ec504c9607cb41</anchor>
      <arglist>(RelativeTorque) template&lt; typename Scalar</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ad79fb47ab6cd23e24b5644c824fdd391</anchor>
      <arglist>(std::ostream &amp;stream, const RelativeQuantity&lt; Q, Dim, CoordinateSpace &gt; &amp;_fq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RemoveEntities.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>RemoveEntities_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::RemoveModelFromWorld::Implementation</class>
    <class kind="class">ignition::physics::RemoveModelFromWorld::Model</class>
    <class kind="class">ignition::physics::RemoveModelFromWorld</class>
    <class kind="class">ignition::physics::RemoveModelFromWorld::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="typedef">
      <type>FeatureList&lt; RemoveModelFromWorld &gt;</type>
      <name>RemoveEntities</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aab44889c286b86cc49fbc76fa583be28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RequestEngine.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>RequestEngine_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="struct">ignition::physics::RequestEngine</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PHYSICS_REQUEST_FEATURES_MACRO</name>
      <anchorfile>RequestEngine_8hh.html</anchorfile>
      <anchor>a051faf319973fae8ac418eef9b433dc8</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy2d, FeatureList &gt;</type>
      <name>RequestEngine2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>addea1ed9b2d4cc0c918d9ad75055c43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy2f, FeatureList &gt;</type>
      <name>RequestEngine2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a301637e26a0eba63dd1a7b772f8d1b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy3d, FeatureList &gt;</type>
      <name>RequestEngine3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a63d29b99afb86d9d60d535ec05941d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy3f, FeatureList &gt;</type>
      <name>RequestEngine3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a62cb1cbf94ee51dc797d8aff2fdd8989</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RequestFeatures.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>RequestFeatures_8hh</filename>
    <includes id="Entity_8hh" name="Entity.hh" local="no" imported="no">ignition/physics/Entity.hh</includes>
    <class kind="struct">ignition::physics::RequestFeatures</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>RevoluteJoint.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>RevoluteJoint_8hh</filename>
    <includes id="DeclareJointType_8hh" name="DeclareJointType.hh" local="no" imported="no">ignition/physics/DeclareJointType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AttachRevoluteJointFeature</class>
    <class kind="class">ignition::physics::AttachRevoluteJointFeature::Implementation</class>
    <class kind="class">ignition::physics::SetRevoluteJointProperties::Implementation</class>
    <class kind="class">ignition::physics::AttachRevoluteJointFeature::Link</class>
    <class kind="class">ignition::physics::SetRevoluteJointProperties::RevoluteJoint</class>
    <class kind="class">ignition::physics::SetRevoluteJointProperties</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>Shape.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>Shape_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <includes id="FrameSemantics_8hh" name="FrameSemantics.hh" local="no" imported="no">ignition/physics/FrameSemantics.hh</includes>
    <includes id="RelativeQuantity_8hh" name="RelativeQuantity.hh" local="no" imported="no">ignition/physics/RelativeQuantity.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::CollisionFilterMaskFeature</class>
    <class kind="class">ignition::physics::GetShapeBoundingBox</class>
    <class kind="class">ignition::physics::GetShapeCollisionProperties</class>
    <class kind="class">ignition::physics::GetShapeKinematicProperties</class>
    <class kind="class">ignition::physics::CollisionFilterMaskFeature::Implementation</class>
    <class kind="class">ignition::physics::SetShapeCollisionProperties::Implementation</class>
    <class kind="class">ignition::physics::GetShapeBoundingBox::Implementation</class>
    <class kind="class">ignition::physics::GetShapeCollisionProperties::Implementation</class>
    <class kind="class">ignition::physics::SetShapeKinematicProperties::Implementation</class>
    <class kind="class">ignition::physics::GetShapeKinematicProperties::Implementation</class>
    <class kind="class">ignition::physics::SetShapeCollisionProperties</class>
    <class kind="class">ignition::physics::SetShapeKinematicProperties</class>
    <class kind="class">ignition::physics::CollisionFilterMaskFeature::Shape</class>
    <class kind="class">ignition::physics::SetShapeCollisionProperties::Shape</class>
    <class kind="class">ignition::physics::GetShapeBoundingBox::Shape</class>
    <class kind="class">ignition::physics::GetShapeCollisionProperties::Shape</class>
    <class kind="class">ignition::physics::SetShapeKinematicProperties::Shape</class>
    <class kind="class">ignition::physics::GetShapeKinematicProperties::Shape</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="file">
    <name>SpecifyData.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>SpecifyData_8hh</filename>
    <class kind="class">ignition::physics::ExpectData&lt; Expected &gt;</class>
    <class kind="struct">ignition::physics::FindExpected</class>
    <class kind="struct">ignition::physics::FindRequired</class>
    <class kind="struct">ignition::physics::IsExpectedBy</class>
    <class kind="struct">ignition::physics::IsRequiredBy</class>
    <class kind="class">ignition::physics::RequireData&lt; Required &gt;</class>
    <class kind="class">ignition::physics::SpecifyData</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>CountUpperLimitOfExpectedData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae18287825f53bd2c71c51f4c248591c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>CountUpperLimitOfRequiredData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5d180e38b448d9fe9d82ffe072902d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>CountUpperLimitOfSpecifiedData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a9892e9cab92e56839d95c58b60410f23</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphereShape.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>SphereShape_8hh</filename>
    <includes id="DeclareShapeType_8hh" name="DeclareShapeType.hh" local="no" imported="no">ignition/physics/DeclareShapeType.hh</includes>
    <includes id="Geometry_8hh" name="Geometry.hh" local="no" imported="no">ignition/physics/Geometry.hh</includes>
    <class kind="class">ignition::physics::AttachSphereShapeFeature</class>
    <class kind="class">ignition::physics::AttachSphereShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::SetSphereShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::AttachSphereShapeFeature::Link</class>
    <class kind="class">ignition::physics::SetSphereShapeProperties</class>
    <class kind="class">ignition::physics::SetSphereShapeProperties::SphereShape</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aeb27d6bfbb7f3f282190045caf1376bb</anchor>
      <arglist>(SphereShape) class GetSphereShapeProperties</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TemplateHelpers.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/include/ignition/physics/</path>
    <filename>TemplateHelpers_8hh</filename>
    <class kind="struct">ignition::physics::ConstCompatible</class>
    <class kind="struct">ignition::physics::ConstCompatible&lt; To, const From &gt;</class>
    <class kind="struct">ignition::physics::Empty</class>
    <class kind="struct">ignition::physics::type</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IGN_PHYSICS_CREATE_SELECTOR</name>
      <anchorfile>TemplateHelpers_8hh.html</anchorfile>
      <anchor>a0efd7c702cc13c171a52feb85e64417a</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ab8ddf9531fc4ac7ce28574db20c8f20e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>World.hh</name>
    <path>/home/claire/citadel_ws/src/ign-physics/dartsim/include/ignition/physics/dartsim/</path>
    <filename>World_8hh</filename>
    <includes id="FeatureList_8hh" name="FeatureList.hh" local="no" imported="no">ignition/physics/FeatureList.hh</includes>
    <class kind="class">ignition::physics::dartsim::RetrieveWorld::Implementation</class>
    <class kind="class">ignition::physics::dartsim::RetrieveWorld</class>
    <class kind="class">ignition::physics::dartsim::RetrieveWorld::World</class>
    <namespace>ignition</namespace>
    <namespace>ignition::physics</namespace>
    <namespace>ignition::physics::dartsim</namespace>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AddLinkExternalForceTorque</name>
    <filename>classignition_1_1physics_1_1AddLinkExternalForceTorque.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; LinkFrameSemantics &gt;</base>
    <class kind="class">ignition::physics::AddLinkExternalForceTorque::Implementation</class>
    <class kind="class">ignition::physics::AddLinkExternalForceTorque::Link</class>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ApplyExternalForceTorques</name>
    <filename>structignition_1_1physics_1_1ApplyExternalForceTorques.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1ApplyExternalForceTorques.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ForceTorque &gt;</type>
      <name>entries</name>
      <anchorfile>structignition_1_1physics_1_1ApplyExternalForceTorques.html</anchorfile>
      <anchor>a364412d68f3fb3228f0ad728e44f455c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ApplyGeneralizedForces</name>
    <filename>structignition_1_1physics_1_1ApplyGeneralizedForces.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1ApplyGeneralizedForces.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GeneralizedParameters &gt;</type>
      <name>forces</name>
      <anchorfile>structignition_1_1physics_1_1ApplyGeneralizedForces.html</anchorfile>
      <anchor>ab0b60fc0e1a502a98b1840769a86772b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachBoxShapeFeature</name>
    <filename>classignition_1_1physics_1_1AttachBoxShapeFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; BoxShapeCast &gt;</base>
    <class kind="class">ignition::physics::AttachBoxShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::AttachBoxShapeFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachCylinderShapeFeature</name>
    <filename>classignition_1_1physics_1_1AttachCylinderShapeFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; CylinderShapeCast &gt;</base>
    <class kind="class">ignition::physics::AttachCylinderShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::AttachCylinderShapeFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::mesh::AttachMeshShapeFeature</name>
    <filename>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; MeshShapeCast &gt;</base>
    <class kind="class">ignition::physics::mesh::AttachMeshShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::mesh::AttachMeshShapeFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachPlaneShapeFeature</name>
    <filename>classignition_1_1physics_1_1AttachPlaneShapeFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; PlaneShapeCast &gt;</base>
    <class kind="class">ignition::physics::AttachPlaneShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::AttachPlaneShapeFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachPrismaticJointFeature</name>
    <filename>classignition_1_1physics_1_1AttachPrismaticJointFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; PrismaticJointCast &gt;</base>
    <class kind="class">ignition::physics::AttachPrismaticJointFeature::Implementation</class>
    <class kind="class">ignition::physics::AttachPrismaticJointFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachRevoluteJointFeature</name>
    <filename>classignition_1_1physics_1_1AttachRevoluteJointFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; RevoluteJointCast &gt;</base>
    <class kind="class">ignition::physics::AttachRevoluteJointFeature::Implementation</class>
    <class kind="class">ignition::physics::AttachRevoluteJointFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachSphereShapeFeature</name>
    <filename>classignition_1_1physics_1_1AttachSphereShapeFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; SphereShapeCast &gt;</base>
    <class kind="class">ignition::physics::AttachSphereShapeFeature::Implementation</class>
    <class kind="class">ignition::physics::AttachSphereShapeFeature::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetBoxShapeProperties::BoxShape</name>
    <filename>classignition_1_1physics_1_1SetBoxShapeProperties_1_1BoxShape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1SetBoxShapeProperties_1_1BoxShape.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classignition_1_1physics_1_1SetBoxShapeProperties_1_1BoxShape.html</anchorfile>
      <anchor>a7cb0b3a1e3c205b5b84eaf800b665061</anchor>
      <arglist>(const Dimensions &amp;_size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CanReadExpectedData</name>
    <filename>classignition_1_1physics_1_1CanReadExpectedData.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CanReadExpectedData</name>
      <anchorfile>classignition_1_1physics_1_1CanReadExpectedData.html</anchorfile>
      <anchor>a23eadb9573332ed4fa219170684cdcb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadExpectedData</name>
      <anchorfile>classignition_1_1physics_1_1CanReadExpectedData.html</anchorfile>
      <anchor>a9b616dffa3427af7be745ed9b051758f</anchor>
      <arglist>(const CompositeType &amp;_data, const ReadOptions &amp;_options=ReadOptions())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CanReadRequiredData</name>
    <filename>classignition_1_1physics_1_1CanReadRequiredData.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CanReadRequiredData</name>
      <anchorfile>classignition_1_1physics_1_1CanReadRequiredData.html</anchorfile>
      <anchor>a64de0f14c6d48c28176f931668a88b97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadRequiredData</name>
      <anchorfile>classignition_1_1physics_1_1CanReadRequiredData.html</anchorfile>
      <anchor>ac585a613a04ba4b3656bf6b04b2ca22a</anchor>
      <arglist>(const CompositeType &amp;_data, const ReadOptions &amp;_options=ReadOptions())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CanWriteExpectedData</name>
    <filename>classignition_1_1physics_1_1CanWriteExpectedData.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CanWriteExpectedData</name>
      <anchorfile>classignition_1_1physics_1_1CanWriteExpectedData.html</anchorfile>
      <anchor>a8621c1c1e35a8776a507b9a1cf855ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteExpectedData</name>
      <anchorfile>classignition_1_1physics_1_1CanWriteExpectedData.html</anchorfile>
      <anchor>a47b98ef26f4aa9bad2db20f9c276d4c3</anchor>
      <arglist>(CompositeType &amp;_data, const WriteOptions &amp;_options=WriteOptions()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CanWriteRequiredData</name>
    <filename>classignition_1_1physics_1_1CanWriteRequiredData.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CanWriteRequiredData</name>
      <anchorfile>classignition_1_1physics_1_1CanWriteRequiredData.html</anchorfile>
      <anchor>acb7524a9464aa51809b13a7007e49fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteRequiredData</name>
      <anchorfile>classignition_1_1physics_1_1CanWriteRequiredData.html</anchorfile>
      <anchor>ab4558efc4591e1e341875b05c9c2542a</anchor>
      <arglist>(CompositeType &amp;_data, const WriteOptions &amp;_options=WriteOptions()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CollisionFilterMaskFeature</name>
    <filename>classignition_1_1physics_1_1CollisionFilterMaskFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::CollisionFilterMaskFeature::Implementation</class>
    <class kind="class">ignition::physics::CollisionFilterMaskFeature::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CompleteFrameSemantics</name>
    <filename>classignition_1_1physics_1_1CompleteFrameSemantics.html</filename>
    <base virtualness="virtual">ignition::physics::LinkFrameSemantics</base>
    <base virtualness="virtual">ignition::physics::JointFrameSemantics</base>
    <base virtualness="virtual">ignition::physics::ModelFrameSemantics</base>
    <member kind="typedef">
      <type>FrameSemantics::Engine&lt; Policy, Features &gt;</type>
      <name>Engine</name>
      <anchorfile>classignition_1_1physics_1_1CompleteFrameSemantics.html</anchorfile>
      <anchor>a4e7a487dd2ef504a01504193dfee909f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CompositeData</name>
    <filename>classignition_1_1physics_1_1CompositeData.html</filename>
    <class kind="struct">ignition::physics::CompositeData::DataStatus</class>
    <class kind="struct">ignition::physics::CompositeData::InsertResult</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, DataEntry &gt;</type>
      <name>MapOfData</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a6d134eba916772fb21b01ef811be1fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QueryMode</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a397f67dedc5e2e2abf10830611fda3c0</anchor>
      <arglist></arglist>
      <enumvalue file="classignition_1_1physics_1_1CompositeData.html" anchor="a397f67dedc5e2e2abf10830611fda3c0a1e23852820b9154316c7c06e2b7ba051">NORMAL</enumvalue>
      <enumvalue file="classignition_1_1physics_1_1CompositeData.html" anchor="a397f67dedc5e2e2abf10830611fda3c0a7e92d833d7720dbe631730a6cea03346">SILENT</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeData</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aaccd53d66206e63eef8073c6a2db23a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeData</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a9774d8c54ce773987a9224173f894ae6</anchor>
      <arglist>(const CompositeData &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeData</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a4f35112f8351fb363d1f555788060701</anchor>
      <arglist>(CompositeData &amp;&amp;_other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeData</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a0088d0844afd3db662212c3965bd143a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>AllEntries</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>ab6a638f0bc9721fb6f8a8a3664250e67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CompositeData &amp;</type>
      <name>Copy</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>ace053ec5f49a9cf98a262cf4281d43f7</anchor>
      <arglist>(const CompositeData &amp;_other, const bool _mergeRequirements=false)</arglist>
    </member>
    <member kind="function">
      <type>CompositeData &amp;</type>
      <name>Copy</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a511baf1f9fe4da1772c04578afc15b9c</anchor>
      <arglist>(CompositeData &amp;&amp;_other, const bool _mergeRequirements=false)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>EntryCount</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aceb1634665cea2449c11eabe35a66558</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>Get</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a437c461d27e8ffaa84c9777357737c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Has</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aee73f131876e1238894643812738ff0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InsertResult&lt; Data &gt;</type>
      <name>Insert</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aa466244c5dacaeb9df2debccd8afadf6</anchor>
      <arglist>(Args &amp;&amp;..._args)</arglist>
    </member>
    <member kind="function">
      <type>InsertResult&lt; Data &gt;</type>
      <name>InsertOrAssign</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>ab1cd75c2da85bcd8321972a690a77b13</anchor>
      <arglist>(Args &amp;&amp;... _args)</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>MakeRequired</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>afc229bacd6625969e829cede4ce93d65</anchor>
      <arglist>(Args &amp;&amp;..._args)</arglist>
    </member>
    <member kind="function">
      <type>CompositeData &amp;</type>
      <name>Merge</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a37eaa3bbec33484c9c13f30613c23ab9</anchor>
      <arglist>(const CompositeData &amp;_other, const bool _mergeRequirements=false)</arglist>
    </member>
    <member kind="function">
      <type>CompositeData &amp;</type>
      <name>Merge</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aee81e84c3027968955eddeca9b7ba12e</anchor>
      <arglist>(CompositeData &amp;&amp;_other, const bool _mergeRequirements=false)</arglist>
    </member>
    <member kind="function">
      <type>CompositeData &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>ab0c268dfc207d8594a1d89b1e5bf928f</anchor>
      <arglist>(const CompositeData &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>CompositeData &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a9a94f15b0e991b09d4c2193b490248a5</anchor>
      <arglist>(CompositeData &amp;&amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>Query</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a8b642aa4bb0ccca176e8cced35e6fcf1</anchor>
      <arglist>(const QueryMode _mode=QueryMode::NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>const Data *</type>
      <name>Query</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a43d075db6eb6b2eb785803bf452fcc08</anchor>
      <arglist>(const QueryMode mode=QueryMode::NORMAL) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Remove</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aa352ba2034799968ee16cf200c9e4a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Requires</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a36af83eabef845fbbef77eeda9e4c057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetQueries</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>ac500fac1598b2a32223bafa5d9041f70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataStatus</type>
      <name>StatusOf</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a25a8620e6d038864cebad75aa3007d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>UnqueriedEntries</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>aed1349c97a452b00db7a51e8a803d96e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>UnqueriedEntryCount</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>afcc7dc726477d45e0664735c4d5b83aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unquery</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a112cac185490831a39747fa97e8d0a97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>AlwaysRequires</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>ae324510201c335567e98628fcea86be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>Expects</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a9e2adf8ad108f4874d2a09647fa4131d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapOfData</type>
      <name>dataMap</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>af86b8f7bb94e467fd4dd979b3b586b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>numEntries</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a05af7b5cfa379dad2bfdb546d408a3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>numQueries</name>
      <anchorfile>classignition_1_1physics_1_1CompositeData.html</anchorfile>
      <anchor>a5977c7c05d23c88dd42c909fa7bd86a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ConstCompatible</name>
    <filename>structignition_1_1physics_1_1ConstCompatible.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ConstCompatible&lt; To, const From &gt;</name>
    <filename>structignition_1_1physics_1_1ConstCompatible_3_01To_00_01const_01From_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>integral_constant&lt; bool, std::is_const&lt; To &gt;::value &gt;</base>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyLinkFeature</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyLinkFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::ConstructEmptyLinkFeature::Implementation</class>
    <class kind="class">ignition::physics::ConstructEmptyLinkFeature::Model</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyModelFeature</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyModelFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::ConstructEmptyModelFeature::Implementation</class>
    <class kind="class">ignition::physics::ConstructEmptyModelFeature::World</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyWorldFeature</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyWorldFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::ConstructEmptyWorldFeature::Engine</class>
    <class kind="class">ignition::physics::ConstructEmptyWorldFeature::Implementation</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfCollision</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfCollision.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::sdf::ConstructSdfCollision::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfCollision::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfJoint</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfJoint.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::sdf::ConstructSdfJoint::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfJoint::Model</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfLink</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfLink.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::sdf::ConstructSdfLink::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfLink::Model</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfModel</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfModel.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::sdf::ConstructSdfModel::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfModel::World</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfVisual</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfVisual.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::sdf::ConstructSdfVisual::Implementation</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfVisual::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfWorld</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfWorld.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::sdf::ConstructSdfWorld::Engine</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfWorld::Implementation</class>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::GetContactsFromLastStepFeature::Implementation::ContactInternal</name>
    <filename>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation_1_1ContactInternal.html</filename>
    <member kind="variable">
      <type>Identity</type>
      <name>collision1</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation_1_1ContactInternal.html</anchorfile>
      <anchor>a8f101827206fdfe2e1f6a4473d502949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Identity</type>
      <name>collision2</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation_1_1ContactInternal.html</anchorfile>
      <anchor>a85c3235c04bac1e28f4759009567bc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CompositeData</type>
      <name>extraData</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation_1_1ContactInternal.html</anchorfile>
      <anchor>a3649dc4421cfc3b9fb06e87adb3f04c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>point</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation_1_1ContactInternal.html</anchorfile>
      <anchor>a4be8f6a789d90f57c0abd489974d6823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::GetContactsFromLastStepFeature::World::ContactPoint</name>
    <filename>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World_1_1ContactPoint.html</filename>
    <member kind="variable">
      <type>ShapePtrType</type>
      <name>collision1</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World_1_1ContactPoint.html</anchorfile>
      <anchor>a2957d8244c67fe42a2cd27f34ad38051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ShapePtrType</type>
      <name>collision2</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World_1_1ContactPoint.html</anchorfile>
      <anchor>ad9dcb92828c9d9bb5b4e71ffcd5ca2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>point</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World_1_1ContactPoint.html</anchorfile>
      <anchor>a4be8f6a789d90f57c0abd489974d6823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::Contacts</name>
    <filename>structignition_1_1physics_1_1Contacts.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1Contacts.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point &gt;</type>
      <name>entries</name>
      <anchorfile>structignition_1_1physics_1_1Contacts.html</anchorfile>
      <anchor>a78ee83ec80ef9ddc4bbddae046524550</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetCylinderShapeProperties::CylinderShape</name>
    <filename>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1CylinderShape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1CylinderShape.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeight</name>
      <anchorfile>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1CylinderShape.html</anchorfile>
      <anchor>a84f932bcefd4df0ecd53f1bdfb355789</anchor>
      <arglist>(Scalar _height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1CylinderShape.html</anchorfile>
      <anchor>a41f32de570ba724b4c28d8aaec36f06f</anchor>
      <arglist>(Scalar _radius)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::CompositeData::DataStatus</name>
    <filename>structignition_1_1physics_1_1CompositeData_1_1DataStatus.html</filename>
    <member kind="function">
      <type></type>
      <name>DataStatus</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1DataStatus.html</anchorfile>
      <anchor>a8a18ca4f8f4d68b4fc3b17a5483c475e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1DataStatus.html</anchorfile>
      <anchor>a6e480061dc5ecc1f85a71989a6352dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>queried</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1DataStatus.html</anchorfile>
      <anchor>aad82647dbe494c6deb337d6928d1046b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>required</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1DataStatus.html</anchorfile>
      <anchor>a89ebe0265f74c9919a622df7dccbfe5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::DataStatusMask</name>
    <filename>structignition_1_1physics_1_1DataStatusMask.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Condition</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MUST</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8aba5acdff4c018e356ea8d84b29753806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MUST_NOT</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8ab7a9bd64e7bdb8ddd300b0b3927c54e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EITHER</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8a1af1ee6f490daf3ec18ac5cb11944af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EITHER</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8a1af1ee6f490daf3ec18ac5cb11944af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MUST</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8aba5acdff4c018e356ea8d84b29753806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MUST_NOT</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>ab6d907c41d48048e1eb203e15f2fc9a8ab7a9bd64e7bdb8ddd300b0b3927c54e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataStatusMask</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>a079c0e3c6f91319aa83cb8b3e88a8c0c</anchor>
      <arglist>(const Condition _e=EITHER, const Condition _q=EITHER, const Condition _r=EITHER)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Satisfied</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>a6f64c9765fc449221ab1ffe00af8cfd1</anchor>
      <arglist>(const CompositeData::DataStatus &amp;_status) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ConditionSatisfied</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>a77ddf5bbe002de800053b3e68cca2de8</anchor>
      <arglist>(const DataStatusMask::Condition _condition, const bool _value)</arglist>
    </member>
    <member kind="variable">
      <type>Condition</type>
      <name>exist</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>a8489005c121dcd4666d4aaf8445eea57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Condition</type>
      <name>queried</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>a49b6e7f523c5002c84bb69c5407627c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Condition</type>
      <name>required</name>
      <anchorfile>structignition_1_1physics_1_1DataStatusMask.html</anchorfile>
      <anchor>a7d4dab0d08550d118da941f43c721b81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::DetachJointFeature</name>
    <filename>classignition_1_1physics_1_1DetachJointFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::DetachJointFeature::Implementation</class>
    <class kind="class">ignition::physics::DetachJointFeature::Joint</class>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::Empty</name>
    <filename>structignition_1_1physics_1_1Empty.html</filename>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfWorld::Engine</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfWorld_1_1Engine.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Engine&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>WorldPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>WorldPtrType</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfWorld_1_1Engine.html</anchorfile>
      <anchor>a8c2b9a13d99d7ceaa51bb62c6a26f5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>WorldPtrType</type>
      <name>ConstructWorld</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfWorld_1_1Engine.html</anchorfile>
      <anchor>aee44940b856b10fa50af7310485fda1f</anchor>
      <arglist>(const ::sdf::World &amp;_world)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyWorldFeature::Engine</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyWorldFeature_1_1Engine.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Engine&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>WorldPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>WorldPtrType</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyWorldFeature_1_1Engine.html</anchorfile>
      <anchor>a8c2b9a13d99d7ceaa51bb62c6a26f5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>WorldPtrType</type>
      <name>ConstructEmptyWorld</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyWorldFeature_1_1Engine.html</anchorfile>
      <anchor>a8e704f03c59b5bb1e9d99d436966a92c</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::Engine</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Engine.html</filename>
    <templarg>Policy</templarg>
    <templarg>FeaturesT</templarg>
    <base virtualness="virtual">Entity&lt; Policy, FeaturesT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Engine</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Engine.html</anchorfile>
      <anchor>ac90d08db58c617cee6b70ba8df6dc9b6</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::FrameSemantics::Engine</name>
    <filename>classignition_1_1physics_1_1FrameSemantics_1_1Engine.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Engine&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>FrameData&lt; typename PolicyT::Scalar, PolicyT::Dim &gt;</type>
      <name>FrameData</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Engine.html</anchorfile>
      <anchor>af95b9f274ba4ec0be779da202a6be63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RQ</type>
      <name>Reframe</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Engine.html</anchorfile>
      <anchor>afa019db7026218aa4d1abca8bb2936b1</anchor>
      <arglist>(const RQ &amp;_quantity, const FrameID &amp;_withRespectTo=FrameID::World()) const</arglist>
    </member>
    <member kind="function">
      <type>RQ::Quantity</type>
      <name>Resolve</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Engine.html</anchorfile>
      <anchor>ae3ca4a6d82e692cf173fb6e94a2cee7c</anchor>
      <arglist>(const RQ &amp;_quantity, const FrameID &amp;_relativeTo, const FrameID &amp;_inCoordinatesOf) const</arglist>
    </member>
    <member kind="function">
      <type>RQ::Quantity</type>
      <name>Resolve</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Engine.html</anchorfile>
      <anchor>ac11f1e91ae871a9a5a2c90cb6f2460c6</anchor>
      <arglist>(const RQ &amp;_quantity, const FrameID &amp;_relativeTo=FrameID::World()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FrameSemantics::Frame</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Engine.html</anchorfile>
      <anchor>ac729dbcec0059b8d439afe9e0dbe5512</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetEngineInfo::Engine</name>
    <filename>classignition_1_1physics_1_1GetEngineInfo_1_1Engine.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Engine&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetEngineInfo_1_1Engine.html</anchorfile>
      <anchor>abfce090b7cf2b45d19a5c4e7e28e6f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetName</name>
      <anchorfile>classignition_1_1physics_1_1GetEngineInfo_1_1Engine.html</anchorfile>
      <anchor>a5b52ba705bd2cbff2d8ba9a1fb0b39d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetWorldFromEngine::Engine</name>
    <filename>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Engine&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstWorldPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstWorldPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>a0f3e00e87bcce54fbabc86bbb1c87b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WorldPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>WorldPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>a8c2b9a13d99d7ceaa51bb62c6a26f5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>WorldPtrType</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>ae1ac171b1241edd32c64985a47dd9583</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>ConstWorldPtrType</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>a22e8fb54c7fbb17ed3fb648a9dff5f68</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>WorldPtrType</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>a5ca6f4bf470be67a692462886e601092</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>ConstWorldPtrType</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>a09e0106760bd5243b96f74d9a6844a72</anchor>
      <arglist>(const std::string &amp;_name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetWorldCount</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Engine.html</anchorfile>
      <anchor>a05fac9f3ad9e533d17bb59eeea15369c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Engine&lt; PolicyT, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Engine.html</filename>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Engine</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Engine.html</anchorfile>
      <anchor>ac90d08db58c617cee6b70ba8df6dc9b6</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Entity</name>
    <filename>classignition_1_1physics_1_1Entity.html</filename>
    <templarg>PolicyT</templarg>
    <templarg>FeaturesT</templarg>
    <member kind="typedef">
      <type>FeaturesT</type>
      <name>Features</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>ac202091353cc680ab4ad0fffadd5e4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::DeterminePlugin&lt; Policy, Features &gt;::type</type>
      <name>Pimpl</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>ab43bca5b6c3cc6ec8be5be88c9ee0424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyT</type>
      <name>Policy</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>aa46c3a5af892c6c6c6a6c567d57ad4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Entity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a07d18d40fa0c4b4f1341cfddc0b600dd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>EntityID</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a4767bad580999029429bd004a28e82c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; void &gt; &amp;</type>
      <name>EntityReference</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>aad7f179e0727461cc4353c57cbead2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Identity &amp;</type>
      <name>FullIdentity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a3d163fad7836e4645189deb6ded8e1e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Entity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>abbfc3299e5b1343feb9048fa0b61ccc6</anchor>
      <arglist>(const std::shared_ptr&lt; Pimpl &gt; &amp;_pimpl=nullptr, const Identity &amp;_identity=Identity())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Entity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a7e3ea632cdebb63636a3831f026f66e9</anchor>
      <arglist>(std::shared_ptr&lt; Pimpl &gt; &amp;&amp;_pimpl, const Identity &amp;_identity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FeatureT::template Implementation&lt; Policy &gt; *</type>
      <name>Interface</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>aee54e06d8c7f07231042977818f0a407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const F::template Implementation&lt; Policy &gt; *</type>
      <name>Interface</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a7effb5a9e139b2a9de386df39815e5cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Identity</type>
      <name>identity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a24794d1d2ae15cbfb2107668b4636c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Pimpl &gt;</type>
      <name>pimpl</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a1ed331ff47132370a06d241b0b9914b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a1cc52763b73e6482419956fe11d215e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>RequestFeatures</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a5562bebf6983f5c3ba0621bcc3e44f22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Entity&lt; Policy, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Entity.html</filename>
    <member kind="typedef">
      <type>FeaturesT</type>
      <name>Features</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>ac202091353cc680ab4ad0fffadd5e4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::DeterminePlugin&lt; Policy, Features &gt;::type</type>
      <name>Pimpl</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>ab43bca5b6c3cc6ec8be5be88c9ee0424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Policy</type>
      <name>Policy</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>aa46c3a5af892c6c6c6a6c567d57ad4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Entity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a07d18d40fa0c4b4f1341cfddc0b600dd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>EntityID</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a4767bad580999029429bd004a28e82c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; void &gt; &amp;</type>
      <name>EntityReference</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>aad7f179e0727461cc4353c57cbead2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Identity &amp;</type>
      <name>FullIdentity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a3d163fad7836e4645189deb6ded8e1e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Entity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>abbfc3299e5b1343feb9048fa0b61ccc6</anchor>
      <arglist>(const std::shared_ptr&lt; Pimpl &gt; &amp;_pimpl=nullptr, const Identity &amp;_identity=Identity())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Entity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a7e3ea632cdebb63636a3831f026f66e9</anchor>
      <arglist>(std::shared_ptr&lt; Pimpl &gt; &amp;&amp;_pimpl, const Identity &amp;_identity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FeatureT::template Implementation&lt; Policy &gt; *</type>
      <name>Interface</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>aee54e06d8c7f07231042977818f0a407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const F::template Implementation&lt; Policy &gt; *</type>
      <name>Interface</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a7effb5a9e139b2a9de386df39815e5cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Identity</type>
      <name>identity</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a24794d1d2ae15cbfb2107668b4636c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Pimpl &gt;</type>
      <name>pimpl</name>
      <anchorfile>classignition_1_1physics_1_1Entity.html</anchorfile>
      <anchor>a1ed331ff47132370a06d241b0b9914b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::EntityPtr</name>
    <filename>classignition_1_1physics_1_1EntityPtr.html</filename>
    <templarg>EntityT</templarg>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a3c73638ea3d36549d21b7556340ec943</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a721380dee5574b709371dcadb224a234</anchor>
      <arglist>(EntityPtr &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a13e63acd341b441043cab1cf7463b400</anchor>
      <arglist>(const EntityPtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a897e76e65dfe76faa015f0317695d192</anchor>
      <arglist>(std::nullptr_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>aa7c533ea9276c29dac0d3b65d4749f2f</anchor>
      <arglist>(std::nullopt_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a266a1f2e93ec94a1f083d951ac829f8f</anchor>
      <arglist>(const std::shared_ptr&lt; Pimpl &gt; &amp;_pimpl, const Identity &amp;_identity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a3ef2806423be5317cf0b6430291a244a</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>ac695afa104ce418a315a3f8f266c3d0a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Hash</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a5bde30d27ec0cc3a297c7e4ff8880c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>aa2024e00faf52ddbc53c807de887b14c</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>EntityT &amp;</type>
      <name>operator*</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>accc397b0cdf2073ce1203159bb3b1108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntityT *</type>
      <name>operator-&gt;</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>aa6fde2a4f41166e5ac9ac5f56c95920f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a074cbf7bba2d64982370938f02071445</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a7becb2d53a79b467ddeccc5696f46e81</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>EntityPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a9589b5df7ec3ff9fcc410db7f26b6e0c</anchor>
      <arglist>(EntityPtr &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>EntityPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a518575d1553f0d5cd11f3388a27d9a42</anchor>
      <arglist>(const EntityPtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EntityPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a2bcfefc29916b4330e37cb53bd368552</anchor>
      <arglist>(std::nullptr_t)</arglist>
    </member>
    <member kind="function">
      <type>EntityPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>ad099c70357956a055af7645f147210d1</anchor>
      <arglist>(std::nullopt_t)</arglist>
    </member>
    <member kind="function">
      <type>EntityPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a1a1d12ae7aa57fef3902e3b826d26442</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>ab976d52bcec1a0787cce86f124f85837</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>afcac8272813a55710a4a935c539fcc5d</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a07e510ff876f381cd72435299d72bd21</anchor>
      <arglist>(const EntityPtr&lt; OtherEntityT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Valid</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a470438bf41ff0f2cc2fc41682c8f839e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EntityPtr</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a1cc52763b73e6482419956fe11d215e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>RequestFeatures</name>
      <anchorfile>classignition_1_1physics_1_1EntityPtr.html</anchorfile>
      <anchor>a5562bebf6983f5c3ba0621bcc3e44f22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ExpectData&lt; Expected &gt;</name>
    <filename>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::CompositeData</base>
    <member kind="typedef">
      <type>Expected</type>
      <name>ExpectedData</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a43c1a8c1c269c3e3e5848567876bb561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>RequiredData</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a51317bf63020538a1d3727fcf8d15721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExpectData&lt; Expected &gt;</type>
      <name>Specification</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a54d7962701772e0cc33e72406b14d091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>SubSpecification1</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a4b75804b95a824e1ca9469e67001c015</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>SubSpecification2</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a6d8ddae10ad9f3007b43eeeecae7efbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpectData</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>ac0145282bf912f34c428a9c98db3728f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpectData</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>ae71992dc3f31d802496cd0ce9b4a5c07</anchor>
      <arglist>(const ExpectData &amp;_other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpectData</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>ab7b7df7816b8b63ef65fdea450415541</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>Get</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a437c461d27e8ffaa84c9777357737c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Has</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>aee73f131876e1238894643812738ff0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InsertResult&lt; Data &gt;</type>
      <name>Insert</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a9476359456bfeb95e88b48c7c8bee37e</anchor>
      <arglist>(Args &amp;&amp;... _args)</arglist>
    </member>
    <member kind="function">
      <type>InsertResult&lt; Data &gt;</type>
      <name>InsertOrAssign</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>ab1cd75c2da85bcd8321972a690a77b13</anchor>
      <arglist>(Args &amp;&amp;... _args)</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>MakeRequired</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>affd6db44e715456afa29629aa72f1d88</anchor>
      <arglist>(Args &amp;&amp;... _args)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>Query</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a8b642aa4bb0ccca176e8cced35e6fcf1</anchor>
      <arglist>(const QueryMode _mode=QueryMode::NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>const Data *</type>
      <name>Query</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>aa74d67589ca2354cd0f919ab2ad116f2</anchor>
      <arglist>(const QueryMode _mode=QueryMode::NORMAL) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Remove</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>aa352ba2034799968ee16cf200c9e4a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Requires</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a36af83eabef845fbbef77eeda9e4c057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataStatus</type>
      <name>StatusOf</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a25a8620e6d038864cebad75aa3007d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unquery</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a112cac185490831a39747fa97e8d0a97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>Expects</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>a9e2adf8ad108f4874d2a09647fa4131d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>detail::PrivateExpectData&lt; Expected &gt;</type>
      <name>privateExpectData</name>
      <anchorfile>classignition_1_1physics_1_1ExpectData_3_01Expected_01_4.html</anchorfile>
      <anchor>acbb752cbb4462f6901d4abba730b5242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::GetContactsFromLastStepFeature::ExtraContactDataT</name>
    <filename>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1ExtraContactDataT.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1ExtraContactDataT.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Vector &gt;</type>
      <name>VectorType</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1ExtraContactDataT.html</anchorfile>
      <anchor>a63c169a83d7bc9d4a89660ffd940a2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>depth</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1ExtraContactDataT.html</anchorfile>
      <anchor>a97d6509bbe25b3f7aac1f4433a360d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>force</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1ExtraContactDataT.html</anchorfile>
      <anchor>afb983a9e8c58b512172a1fc388b1d02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorType</type>
      <name>normal</name>
      <anchorfile>structignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1ExtraContactDataT.html</anchorfile>
      <anchor>a9bb8e77de34edafac16cfc4fe8879938</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature</name>
    <filename>classignition_1_1physics_1_1Feature.html</filename>
    <class kind="class">ignition::physics::Feature::Engine</class>
    <class kind="class">ignition::physics::Feature::Implementation</class>
    <class kind="class">ignition::physics::Feature::Joint</class>
    <class kind="class">ignition::physics::Feature::Link</class>
    <class kind="class">ignition::physics::Feature::Model</class>
    <class kind="class">ignition::physics::Feature::Shape</class>
    <class kind="class">ignition::physics::Feature::World</class>
    <member kind="typedef">
      <type>void</type>
      <name>RequiredFeatures</name>
      <anchorfile>classignition_1_1physics_1_1Feature.html</anchorfile>
      <anchor>af0fe658a8375578761c7cd5b0c1aaa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>ConflictsWith</name>
      <anchorfile>classignition_1_1physics_1_1Feature.html</anchorfile>
      <anchor>a511435e48e4fbff2c77b90d582575265</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FeatureList</name>
    <filename>structignition_1_1physics_1_1FeatureList.html</filename>
    <templarg>FeaturesT</templarg>
    <member kind="typedef">
      <type>typename detail::CombineLists&lt; FeaturesT... &gt;::Result</type>
      <name>Features</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>a65565a72606524f7a401261ff102a898</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; FeaturesT... &gt;</type>
      <name>FeatureTuple</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>ad3c3613403b35d4ef058fd693b98147c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>RequiredFeatures</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>af0fe658a8375578761c7cd5b0c1aaa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>ConflictsWith</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>a511435e48e4fbff2c77b90d582575265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>HasFeature</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>a7f9dc5552780c297db001979bb905f13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FeatureList&lt; GetEngineInfo, GetWorldFromEngine, GetModelFromWorld, GetLinkFromModel, GetJointFromModel, GetShapeFromLink &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureList.html</filename>
    <member kind="typedef">
      <type>typename detail::CombineLists&lt; FeaturesT... &gt;::Result</type>
      <name>Features</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>a65565a72606524f7a401261ff102a898</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; FeaturesT... &gt;</type>
      <name>FeatureTuple</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>ad3c3613403b35d4ef058fd693b98147c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>RequiredFeatures</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>af0fe658a8375578761c7cd5b0c1aaa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>ConflictsWith</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>a511435e48e4fbff2c77b90d582575265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>HasFeature</name>
      <anchorfile>structignition_1_1physics_1_1FeatureList.html</anchorfile>
      <anchor>a7f9dc5552780c297db001979bb905f13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FeaturePolicy</name>
    <filename>structignition_1_1physics_1_1FeaturePolicy.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <member kind="enumvalue">
      <name>Dim</name>
      <anchorfile>structignition_1_1physics_1_1FeaturePolicy.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf16897a262b0a595bd06b526a859171b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dim</name>
      <anchorfile>structignition_1_1physics_1_1FeaturePolicy.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf16897a262b0a595bd06b526a859171b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>structignition_1_1physics_1_1FeaturePolicy.html</anchorfile>
      <anchor>a6fa11dec91853825239d6a3dc7361cfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FeatureWithConflicts</name>
    <filename>structignition_1_1physics_1_1FeatureWithConflicts.html</filename>
    <templarg>ConflictingFeatures</templarg>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FeatureWithRequirements</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
    <templarg>RequiredFeatures</templarg>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; BoxShapeCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; CylinderShapeCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; FindFreeGroupFeature &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; FindFreeGroupFeature, FrameSemantics &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; ForwardStep &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; GetLinkBoundingBoxRequiredFeatures &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; GetModelBoundingBoxRequiredFeatures &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; LinkFrameSemantics &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; MeshShapeCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; PlaneShapeCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; PrismaticJointCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; RevoluteJointCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; ShapeFrameSemantics &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="class">
    <name>FeatureWithRequirements&lt; SphereShapeCast &gt;</name>
    <filename>structignition_1_1physics_1_1FeatureWithRequirements.html</filename>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FindExpected</name>
    <filename>structignition_1_1physics_1_1FindExpected.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Specification::ExpectedData</type>
      <name>Data</name>
      <anchorfile>structignition_1_1physics_1_1FindExpected.html</anchorfile>
      <anchor>a3cc65cc2de811ea8c5b5ab148edb2978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FindFeatures</name>
    <filename>structignition_1_1physics_1_1FindFeatures.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FeatureListT</type>
      <name>Features</name>
      <anchorfile>structignition_1_1physics_1_1FindFeatures.html</anchorfile>
      <anchor>af93e68f846a7ae2f6ec49de956d92f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::set&lt; std::string &gt;</type>
      <name>From</name>
      <anchorfile>structignition_1_1physics_1_1FindFeatures.html</anchorfile>
      <anchor>a72938250a7a22eeffc208c870a5f7bf5</anchor>
      <arglist>(const LoaderT &amp;_loader)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FindRequired</name>
    <filename>structignition_1_1physics_1_1FindRequired.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Specification::RequiredData</type>
      <name>Data</name>
      <anchorfile>structignition_1_1physics_1_1FindRequired.html</anchorfile>
      <anchor>a19f570d13e15a5b57c2102c29dc3134e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ForceTorque</name>
    <filename>structignition_1_1physics_1_1ForceTorque.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1ForceTorque.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>body</name>
      <anchorfile>structignition_1_1physics_1_1ForceTorque.html</anchorfile>
      <anchor>a5eb983a1828f291de2902b3de5ff7958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeVector</type>
      <name>force</name>
      <anchorfile>structignition_1_1physics_1_1ForceTorque.html</anchorfile>
      <anchor>a6115a17c528859b01a49514c4153ab38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>location</name>
      <anchorfile>structignition_1_1physics_1_1ForceTorque.html</anchorfile>
      <anchor>ac7c7e0cd54092c1460c14f5f3f4c5d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeVector</type>
      <name>torque</name>
      <anchorfile>structignition_1_1physics_1_1ForceTorque.html</anchorfile>
      <anchor>a09486f2f1a654a796f2c52f652c45f52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ForwardStep</name>
    <filename>classignition_1_1physics_1_1ForwardStep.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::ForwardStep::Implementation</class>
    <class kind="class">ignition::physics::ForwardStep::World</class>
    <member kind="typedef">
      <type>ExpectData&lt; ApplyExternalForceTorques, ApplyGeneralizedForces, VelocityControlCommands, ServoControlCommands &gt;</type>
      <name>Input</name>
      <anchorfile>classignition_1_1physics_1_1ForwardStep.html</anchorfile>
      <anchor>ad3728ac60f9a37ea4d4648079f8a3b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpecifyData&lt; RequireData&lt; WorldPoses &gt;, ExpectData&lt; Contacts, JointPositions &gt; &gt;</type>
      <name>Output</name>
      <anchorfile>classignition_1_1physics_1_1ForwardStep.html</anchorfile>
      <anchor>a10d4430378a3b4d5e6b1865315819318</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CompositeData</type>
      <name>State</name>
      <anchorfile>classignition_1_1physics_1_1ForwardStep.html</anchorfile>
      <anchor>a07fc25a5afb94bf619a2c6922ff06e81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::FrameSemantics::Frame</name>
    <filename>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>FrameData&lt; typename PolicyT::Scalar, PolicyT::Dim &gt;</type>
      <name>FrameData</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>a6d3e0cda6e9cef339403d01ae20b4f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Frame</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>a8ae54204dc53691be2713fe19024cee5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>FrameData</type>
      <name>FrameDataRelativeTo</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>a9622d5813ee42d5cbddff17377f597f4</anchor>
      <arglist>(const FrameID &amp;_relativeTo) const</arglist>
    </member>
    <member kind="function">
      <type>FrameData</type>
      <name>FrameDataRelativeTo</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>a91568a42d892add95e27ac0983f78c19</anchor>
      <arglist>(const FrameID &amp;_relativeTo, const FrameID &amp;_inCoordinatesOf) const</arglist>
    </member>
    <member kind="function">
      <type>FrameData</type>
      <name>FrameDataRelativeToWorld</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>aeaeb16678e9922f695a47fdac530a8f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FrameID</type>
      <name>GetFrameID</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>a3608c0957d1c32b63ea4c0bfe0e6a5c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator FrameID</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Frame.html</anchorfile>
      <anchor>af7c0b213ace615fe5b8dfac3f04fbe2f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FrameData</name>
    <filename>structignition_1_1physics_1_1FrameData.html</filename>
    <templarg>Scalar</templarg>
    <templarg>Dim</templarg>
    <member kind="typedef">
      <type>AngularVector&lt; Scalar, Dim &gt;</type>
      <name>AngularVector</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>ad31e3c831bad7e2036b0464094beab43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; Scalar, Dim &gt;</type>
      <name>LinearVector</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>a256cdfcd5074f1329eb124a60955b268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; Scalar, Dim &gt;</type>
      <name>Pose</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>aedf90574c8b803097df50f00c0a0d49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrameData</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>acfec287c9ee725f6fbbcddf8805e363b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToZero</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>a9ff898ed70c0498f89179e5c57017bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AngularVector</type>
      <name>angularAcceleration</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>ac0ba3a0761e9cdd9b7a483d71ce894d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVector</type>
      <name>angularVelocity</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>aac4ed808cb6d28f8edb06a02cd23000f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVector</type>
      <name>linearAcceleration</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>ae66df6546d48091bf4a3605591a21096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVector</type>
      <name>linearVelocity</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>a1c7f7a86ffbb8627f9f386e53b031e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pose</type>
      <name>pose</name>
      <anchorfile>structignition_1_1physics_1_1FrameData.html</anchorfile>
      <anchor>a6cef9464eeb5ace63256ef8c05a2e373</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::FrameID</name>
    <filename>classignition_1_1physics_1_1FrameID.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameID</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a5d52656ee976e64036543e761d6c0962</anchor>
      <arglist>(const FrameID &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrameID</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a10b6ff872282ca0d0e2732623b92db44</anchor>
      <arglist>(FrameID &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ID</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a9db7d4797d00d2e38df8bedbcaaa2829</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsReferenceCounted</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a40fb1a9a242adde16eb27f0a7065da24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsWorld</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a589c6aedb3e89a1990ed12102b5b3424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a6173a7d652187b3a8e5b8c54e7b0c415</anchor>
      <arglist>(const FrameID &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a24088fb45161dbe89b1f411ae3d5b537</anchor>
      <arglist>(const FrameID &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>ae33cd83a622ec23805ee2c06f873ff8f</anchor>
      <arglist>(const FrameID &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>FrameID &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>abae415f8ae635a52481e425d2db8c72d</anchor>
      <arglist>(const FrameID &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FrameID &amp;</type>
      <name>operator=</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a64227333184a6509d799a5ca853c3f1f</anchor>
      <arglist>(FrameID &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a30e1a552a50d47693a4dc842b2bdff2a</anchor>
      <arglist>(const FrameID &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a63305c125dd65a8f58b9e54001d83ac3</anchor>
      <arglist>(const FrameID &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>ad1e97b3c82a832085236973ffdbb446d</anchor>
      <arglist>(const FrameID &amp;_other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FrameID &amp;</type>
      <name>World</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>af08f5060185e285295c2d74972592e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FrameSemantics</name>
      <anchorfile>classignition_1_1physics_1_1FrameID.html</anchorfile>
      <anchor>a597827323c6b1010607e3f6ce914f7cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::FrameSemantics</name>
    <filename>classignition_1_1physics_1_1FrameSemantics.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::FrameSemantics::Engine</class>
    <class kind="class">ignition::physics::FrameSemantics::Frame</class>
    <class kind="class">ignition::physics::FrameSemantics::Implementation</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetFreeGroupWorldPose::FreeGroup</name>
    <filename>classignition_1_1physics_1_1SetFreeGroupWorldPose_1_1FreeGroup.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldPose_1_1FreeGroup.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWorldPose</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldPose_1_1FreeGroup.html</anchorfile>
      <anchor>a97a3cec538c2fd06ed1e41be8005dcb1</anchor>
      <arglist>(const PoseType &amp;_pose)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetFreeGroupWorldVelocity::FreeGroup</name>
    <filename>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1FreeGroup.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>AngularVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1FreeGroup.html</anchorfile>
      <anchor>a587a9fce6511096447cc454b87671ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>LinearVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1FreeGroup.html</anchorfile>
      <anchor>a0b5dd6d5990c45736336d91f1693e70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWorldAngularVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1FreeGroup.html</anchorfile>
      <anchor>ad0d8734c09a5022280ae43219ba9cfac</anchor>
      <arglist>(const AngularVelocity &amp;_angularVelocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWorldLinearVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1FreeGroup.html</anchorfile>
      <anchor>a1d9c3510ed3305f6caed23627f42ae8b</anchor>
      <arglist>(const LinearVelocity &amp;_linearVelocity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::FreeGroupFrameSemantics</name>
    <filename>classignition_1_1physics_1_1FreeGroupFrameSemantics.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; FindFreeGroupFeature, FrameSemantics &gt;</base>
    <member kind="typedef">
      <type>FrameSemantics::Frame&lt; PolicyT, FeaturesT &gt;</type>
      <name>FreeGroup</name>
      <anchorfile>classignition_1_1physics_1_1FreeGroupFrameSemantics.html</anchorfile>
      <anchor>ae8492f2bd40444229e5ce2dce201804c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FreeVector</name>
    <filename>structignition_1_1physics_1_1FreeVector.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>inCoordinatesOf</name>
      <anchorfile>structignition_1_1physics_1_1FreeVector.html</anchorfile>
      <anchor>a96fa6ecf184671b89afa0d70b80189a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ignition::math::Vector3d</type>
      <name>vec</name>
      <anchorfile>structignition_1_1physics_1_1FreeVector.html</anchorfile>
      <anchor>a87d400f40e8722519a591828ed63e9c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::FromPolicy</name>
    <filename>structignition_1_1physics_1_1FromPolicy.html</filename>
    <templarg>PolicyT</templarg>
    <member kind="enumvalue">
      <name>Dim</name>
      <anchorfile>structignition_1_1physics_1_1FromPolicy.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7af16897a262b0a595bd06b526a859171b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dim</name>
      <anchorfile>structignition_1_1physics_1_1FromPolicy.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7af16897a262b0a595bd06b526a859171b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>structignition_1_1physics_1_1FromPolicy.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type&lt; Scalar, Dim &gt;</type>
      <name>Use</name>
      <anchorfile>structignition_1_1physics_1_1FromPolicy.html</anchorfile>
      <anchor>a36f9ffbd4511a32e14f3e513b2a788aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::GeneralizedParameters</name>
    <filename>structignition_1_1physics_1_1GeneralizedParameters.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1GeneralizedParameters.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>dofs</name>
      <anchorfile>structignition_1_1physics_1_1GeneralizedParameters.html</anchorfile>
      <anchor>adfcdfb5d64985f5805025d7717946ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>forces</name>
      <anchorfile>structignition_1_1physics_1_1GeneralizedParameters.html</anchorfile>
      <anchor>aed7012f304dbd824a017cad1b8b6f370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetBasicJointProperties</name>
    <filename>classignition_1_1physics_1_1GetBasicJointProperties.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetBasicJointProperties::Implementation</class>
    <class kind="class">ignition::physics::GetBasicJointProperties::Joint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetBasicJointState</name>
    <filename>classignition_1_1physics_1_1GetBasicJointState.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetBasicJointState::Implementation</class>
    <class kind="class">ignition::physics::GetBasicJointState::Joint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetContactsFromLastStepFeature</name>
    <filename>classignition_1_1physics_1_1GetContactsFromLastStepFeature.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; ForwardStep &gt;</base>
    <class kind="struct">ignition::physics::GetContactsFromLastStepFeature::ExtraContactDataT</class>
    <class kind="class">ignition::physics::GetContactsFromLastStepFeature::Implementation</class>
    <class kind="class">ignition::physics::GetContactsFromLastStepFeature::World</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetEngineInfo</name>
    <filename>classignition_1_1physics_1_1GetEngineInfo.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetEngineInfo::Engine</class>
    <class kind="class">ignition::physics::GetEngineInfo::Implementation</class>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::GetEntities</name>
    <filename>structignition_1_1physics_1_1GetEntities.html</filename>
    <base>FeatureList&lt; GetEngineInfo, GetWorldFromEngine, GetModelFromWorld, GetLinkFromModel, GetJointFromModel, GetShapeFromLink &gt;</base>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetJointFromModel</name>
    <filename>classignition_1_1physics_1_1GetJointFromModel.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetJointFromModel::Implementation</class>
    <class kind="class">ignition::physics::GetJointFromModel::Joint</class>
    <class kind="class">ignition::physics::GetJointFromModel::Model</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetLinkBoundingBox</name>
    <filename>classignition_1_1physics_1_1GetLinkBoundingBox.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; GetLinkBoundingBoxRequiredFeatures &gt;</base>
    <class kind="class">ignition::physics::GetLinkBoundingBox::Link</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetLinkFromModel</name>
    <filename>classignition_1_1physics_1_1GetLinkFromModel.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetLinkFromModel::Implementation</class>
    <class kind="class">ignition::physics::GetLinkFromModel::Link</class>
    <class kind="class">ignition::physics::GetLinkFromModel::Model</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetModelBoundingBox</name>
    <filename>classignition_1_1physics_1_1GetModelBoundingBox.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; GetModelBoundingBoxRequiredFeatures &gt;</base>
    <class kind="class">ignition::physics::GetModelBoundingBox::Model</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetModelFromWorld</name>
    <filename>classignition_1_1physics_1_1GetModelFromWorld.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetModelFromWorld::Implementation</class>
    <class kind="class">ignition::physics::GetModelFromWorld::Model</class>
    <class kind="class">ignition::physics::GetModelFromWorld::World</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeBoundingBox</name>
    <filename>classignition_1_1physics_1_1GetShapeBoundingBox.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; ShapeFrameSemantics &gt;</base>
    <class kind="class">ignition::physics::GetShapeBoundingBox::Implementation</class>
    <class kind="class">ignition::physics::GetShapeBoundingBox::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeCollisionProperties</name>
    <filename>classignition_1_1physics_1_1GetShapeCollisionProperties.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetShapeCollisionProperties::Implementation</class>
    <class kind="class">ignition::physics::GetShapeCollisionProperties::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeFromLink</name>
    <filename>classignition_1_1physics_1_1GetShapeFromLink.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetShapeFromLink::Implementation</class>
    <class kind="class">ignition::physics::GetShapeFromLink::Link</class>
    <class kind="class">ignition::physics::GetShapeFromLink::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeKinematicProperties</name>
    <filename>classignition_1_1physics_1_1GetShapeKinematicProperties.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetShapeKinematicProperties::Implementation</class>
    <class kind="class">ignition::physics::GetShapeKinematicProperties::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetWorldFromEngine</name>
    <filename>classignition_1_1physics_1_1GetWorldFromEngine.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::GetWorldFromEngine::Engine</class>
    <class kind="class">ignition::physics::GetWorldFromEngine::Implementation</class>
    <class kind="class">ignition::physics::GetWorldFromEngine::World</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeKinematicProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1GetShapeKinematicProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeKinematicProperties_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PoseType</type>
      <name>GetShapeRelativeTransform</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeKinematicProperties_1_1Implementation.html</anchorfile>
      <anchor>ad69d5bf073a361f9d6dd525b4c4d05ed</anchor>
      <arglist>(const Identity &amp;_shapeID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeCollisionProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scalar</type>
      <name>GetFrictionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Implementation.html</anchorfile>
      <anchor>a2f6cfc0d90915b5616ab0120fe613c88</anchor>
      <arglist>(const Identity &amp;_shape0, const Identity &amp;_shape1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scalar</type>
      <name>GetRestitutionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Implementation.html</anchorfile>
      <anchor>a70342b4be48558ed8630bd5949519104</anchor>
      <arglist>(const Identity &amp;_shape0, const Identity &amp;_shape1) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeBoundingBox::Implementation</name>
    <filename>classignition_1_1physics_1_1GetShapeBoundingBox_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AlignedBox &gt;</type>
      <name>AlignedBoxType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeBoundingBox_1_1Implementation.html</anchorfile>
      <anchor>afdeb1153e6240957d11b32320bafd1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AlignedBoxType</type>
      <name>GetShapeAxisAlignedBoundingBox</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeBoundingBox_1_1Implementation.html</anchorfile>
      <anchor>a3093cdd54ea5f690ad0ad12f388185ea</anchor>
      <arglist>(const Identity &amp;_shape) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetShapeCollisionProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetShapeFrictionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Implementation.html</anchorfile>
      <anchor>ad2d649d85020dff3afcc25471258269c</anchor>
      <arglist>(const Identity &amp;_shape0, const Identity &amp;_shape1, Scalar _value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetShapeRestitutionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Implementation.html</anchorfile>
      <anchor>a67cfb27c5eab0371e8e78b17df081fac</anchor>
      <arglist>(const Identity &amp;_shape0, const Identity &amp;_shape1, Scalar _value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetSphereShapeProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetSphereShapeProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetSphereShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetSphereShapeRadius</name>
      <anchorfile>classignition_1_1physics_1_1SetSphereShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a874c3bfbc18b57f6bef3795a665d0b07</anchor>
      <arglist>(const Identity &amp;_sphereID, Scalar _radius)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachSphereShapeFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachSphereShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a1036fe74311f34eee5750b40c47dcfe2</anchor>
      <arglist>(const Identity &amp;_linkID, const std::string &amp;_name, Scalar _radius, const PoseType &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetShapeKinematicProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetShapeKinematicProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeKinematicProperties_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetShapeRelativeTransform</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeKinematicProperties_1_1Implementation.html</anchorfile>
      <anchor>a351cc2ad3ee73591c08a115159f562e5</anchor>
      <arglist>(const Identity &amp;_shapeID, const PoseType &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfJoint::Implementation</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfJoint_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructSdfJoint</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfJoint_1_1Implementation.html</anchorfile>
      <anchor>a176c85b98dfd7d231bb35f9669919172</anchor>
      <arglist>(const Identity &amp;_model, const ::sdf::Joint &amp;_joint)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfModel::Implementation</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfModel_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructSdfModel</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfModel_1_1Implementation.html</anchorfile>
      <anchor>a960f95bb1456648b8cd44d2447723dc8</anchor>
      <arglist>(const Identity &amp;_world, const ::sdf::Model &amp;_model)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::mesh::SetMeshShapeProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>SetMeshShapeScale</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>ab0d99e75030b2bda6456a05c2468e31f</anchor>
      <arglist>(const Identity &amp;_meshID, const Dimensions &amp;_dimensions)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::mesh::AttachMeshShapeFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachMeshShape</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>ab26fed58b16c10324773a47646c98e62</anchor>
      <arglist>(const Identity &amp;_linkID, const std::string &amp;_name, const ignition::common::Mesh &amp;_mesh, const PoseType &amp;_pose, const Dimensions &amp;_scale)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::dartsim::RetrieveWorld::Implementation</name>
    <filename>classignition_1_1physics_1_1dartsim_1_1RetrieveWorld_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual dart::simulation::WorldPtr</type>
      <name>GetDartsimWorld</name>
      <anchorfile>classignition_1_1physics_1_1dartsim_1_1RetrieveWorld_1_1Implementation.html</anchorfile>
      <anchor>ae056122f340c4e311450ea55ac4cc43a</anchor>
      <arglist>(const Identity &amp;_worldID)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachRevoluteJointFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Implementation.html</anchorfile>
      <anchor>adc9be710fd3df1e75bd3240c4ae769fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachRevoluteJoint</name>
      <anchorfile>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Implementation.html</anchorfile>
      <anchor>ab755a37eb3a5596a4a102f04cd6e8f3c</anchor>
      <arglist>(const Identity &amp;_childID, const BaseLinkPtr&lt; PolicyT &gt; &amp;_parent, const std::string &amp;_name, const Axis &amp;_axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetEngineInfo::Implementation</name>
    <filename>classignition_1_1physics_1_1GetEngineInfo_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetEngineIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetEngineInfo_1_1Implementation.html</anchorfile>
      <anchor>ad86ceaf0c4c31d23213113637add5514</anchor>
      <arglist>(const Identity &amp;_engineID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetEngineName</name>
      <anchorfile>classignition_1_1physics_1_1GetEngineInfo_1_1Implementation.html</anchorfile>
      <anchor>a15a8e818b6c81558f10308f6c42d8745</anchor>
      <arglist>(const Identity &amp;_engineID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfVisual::Implementation</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfVisual_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructSdfVisual</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfVisual_1_1Implementation.html</anchorfile>
      <anchor>a0154c1266110d87ec2c1ff3ccedbb0c9</anchor>
      <arglist>(const Identity &amp;_linkID, const ::sdf::Visual &amp;_visual)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfCollision::Implementation</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfCollision_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructSdfCollision</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfCollision_1_1Implementation.html</anchorfile>
      <anchor>ac358f665924be92924aea41e8daf465e</anchor>
      <arglist>(const Identity &amp;_linkID, const ::sdf::Collision &amp;_collision)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfWorld::Implementation</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfWorld_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructSdfWorld</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfWorld_1_1Implementation.html</anchorfile>
      <anchor>af4990d5b0fc310bb86c1ed4c14a79f9a</anchor>
      <arglist>(const Identity &amp;_engine, const ::sdf::World &amp;_world)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetBoxShapeProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetBoxShapeProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1SetBoxShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetBoxShapeSize</name>
      <anchorfile>classignition_1_1physics_1_1SetBoxShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>afed231c9a42a7fc01b95f89d2c7ddbc5</anchor>
      <arglist>(const Identity &amp;_boxID, const Dimensions &amp;_size)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachBoxShapeFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachBoxShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>afe2c50365a8ee5eea0df93ed659f1f14</anchor>
      <arglist>(const Identity &amp;_linkID, const std::string &amp;_name, const Dimensions &amp;_size, const PoseType &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfLink::Implementation</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfLink_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructSdfLink</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfLink_1_1Implementation.html</anchorfile>
      <anchor>a78069281ec7b0ca6c55f8794135ecbbf</anchor>
      <arglist>(const Identity &amp;_model, const ::sdf::Link &amp;_link)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyWorldFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyWorldFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructEmptyWorld</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyWorldFeature_1_1Implementation.html</anchorfile>
      <anchor>a7312acbfddd497d32e8fb23fc3d66daa</anchor>
      <arglist>(const Identity &amp;_engineID, const std::string &amp;_name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyModelFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyModelFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructEmptyModel</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyModelFeature_1_1Implementation.html</anchorfile>
      <anchor>aa3a662d05f63bde1d8e9347ce36fca59</anchor>
      <arglist>(const Identity &amp;_worldID, const std::string &amp;_name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyLinkFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyLinkFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>ConstructEmptyLink</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyLinkFeature_1_1Implementation.html</anchorfile>
      <anchor>a89028dd9c578a4aaad3070214e251347</anchor>
      <arglist>(const Identity &amp;_modelID, const std::string &amp;_name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetCylinderShapeProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetCylinderShapeHeight</name>
      <anchorfile>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a554bae5c4c7d84cd6d4004ea5cb99f0a</anchor>
      <arglist>(const Identity &amp;_cylinderID, Scalar _height)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetCylinderShapeRadius</name>
      <anchorfile>classignition_1_1physics_1_1SetCylinderShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a16fa3f0511ef07cbca802c75be0ea274</anchor>
      <arglist>(const Identity &amp;_cylinderID, Scalar _radius)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachCylinderShapeFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachCylinderShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a49e3de6bf62d38132b5c65d8b989ad54</anchor>
      <arglist>(const Identity &amp;_linkID, const std::string &amp;_name, Scalar _radius, Scalar _height, const PoseType &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetWorldFromEngine::Implementation</name>
    <filename>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetEngineOfWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</anchorfile>
      <anchor>aa08c6f7f7b87d92535b4b2fb2b009bda</anchor>
      <arglist>(const Identity &amp;_worldID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</anchorfile>
      <anchor>a3127c16013b557df77d0fefcc34a2bea</anchor>
      <arglist>(const Identity &amp;_engineID, std::size_t _worldIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</anchorfile>
      <anchor>ab3cf34fc8a327c8a1e286caa1a40b5e6</anchor>
      <arglist>(const Identity &amp;_engineID, const std::string &amp;_worldName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetWorldCount</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</anchorfile>
      <anchor>aaff16e17bc25381bd8b20a7f956696b0</anchor>
      <arglist>(const Identity &amp;_engineID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetWorldIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</anchorfile>
      <anchor>ac29e884a86c336a5e5bbc2b18b4a1812</anchor>
      <arglist>(const Identity &amp;_worldID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetWorldName</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1Implementation.html</anchorfile>
      <anchor>aa63763cceaa0a864a21efca16cbeebe5</anchor>
      <arglist>(const Identity &amp;_worldID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::Implementation</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Implementation.html</filename>
    <templarg>Policy</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Implementation.html</anchorfile>
      <anchor>ad74cc12651c6704b1b6a560f6d8df133</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>InitiateEngine</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Implementation.html</anchorfile>
      <anchor>a6003260cc937b7e4d39a08e6eadd65e8</anchor>
      <arglist>(std::size_t engineID=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ForwardStep::Implementation</name>
    <filename>classignition_1_1physics_1_1ForwardStep_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>WorldForwardStep</name>
      <anchorfile>classignition_1_1physics_1_1ForwardStep_1_1Implementation.html</anchorfile>
      <anchor>a421026638ec7ef36dfe904ec59f357ff</anchor>
      <arglist>(const Identity &amp;_worldID, Output &amp;_h, State &amp;_x, const Input &amp;_u)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::FrameSemantics::Implementation</name>
    <filename>classignition_1_1physics_1_1FrameSemantics_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>FrameData&lt; typename PolicyT::Scalar, PolicyT::Dim &gt;</type>
      <name>FrameData</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Implementation.html</anchorfile>
      <anchor>a6d3e0cda6e9cef339403d01ae20b4f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FrameData</type>
      <name>FrameDataRelativeToWorld</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Implementation.html</anchorfile>
      <anchor>aed6bb6588648c33a4a1816a944a347a4</anchor>
      <arglist>(const FrameID &amp;_id) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual FrameID</type>
      <name>GenerateFrameID</name>
      <anchorfile>classignition_1_1physics_1_1FrameSemantics_1_1Implementation.html</anchorfile>
      <anchor>a035d5863b5807a136bb3e60d9c8de1cf</anchor>
      <arglist>(const Identity &amp;_identity) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetFreeGroupWorldPose::Implementation</name>
    <filename>classignition_1_1physics_1_1SetFreeGroupWorldPose_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldPose_1_1Implementation.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFreeGroupWorldPose</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldPose_1_1Implementation.html</anchorfile>
      <anchor>a8a47654eed10ff2670e26e78ac75bda1</anchor>
      <arglist>(const Identity &amp;_groupID, const PoseType &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetFreeGroupWorldVelocity::Implementation</name>
    <filename>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>AngularVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1Implementation.html</anchorfile>
      <anchor>a587a9fce6511096447cc454b87671ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>LinearVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1Implementation.html</anchorfile>
      <anchor>a0b5dd6d5990c45736336d91f1693e70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFreeGroupWorldAngularVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1Implementation.html</anchorfile>
      <anchor>a784918535dc2b23089b64735efe942cc</anchor>
      <arglist>(const Identity &amp;_groupID, const AngularVelocity &amp;_angularVelocity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFreeGroupWorldLinearVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetFreeGroupWorldVelocity_1_1Implementation.html</anchorfile>
      <anchor>a797ca2a032996bcf2020d0cfb6424119</anchor>
      <arglist>(const Identity &amp;_groupID, const LinearVelocity &amp;_linearVelocity)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetContactsFromLastStepFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <class kind="struct">ignition::physics::GetContactsFromLastStepFeature::Implementation::ContactInternal</class>
    <member kind="typedef">
      <type>ExtraContactDataT&lt; PolicyT &gt;</type>
      <name>ExtraContactData</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation.html</anchorfile>
      <anchor>ab7e8411ea838a764a69e5d9cf3630fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Vector &gt;</type>
      <name>VectorType</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation.html</anchorfile>
      <anchor>a63c169a83d7bc9d4a89660ffd940a2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ContactInternal &gt;</type>
      <name>GetContactsFromLastStep</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1Implementation.html</anchorfile>
      <anchor>a8b5da4afbe2cf3b4a29580fc9195be3d</anchor>
      <arglist>(const Identity &amp;_worldID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetModelFromWorld::Implementation</name>
    <filename>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>ab25a7ce7a71b949f70d78ed7ae769323</anchor>
      <arglist>(const Identity &amp;_worldID, std::size_t _modelIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>a41871e1fd9207d90eceeb9ae5dd71dfd</anchor>
      <arglist>(const Identity &amp;_worldID, const std::string &amp;_modelName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetModelCount</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>a4fb9518e2985e06bdd3000965d56646e</anchor>
      <arglist>(const Identity &amp;_worldID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetModelIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>a82dca45395d07993151b57c1fcb77d27</anchor>
      <arglist>(const Identity &amp;_modelID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetModelName</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>a9c1a09a062f601d51939d84c0ffdfb99</anchor>
      <arglist>(const Identity &amp;_modelID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetWorldOfModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>aeb7da440463b91d820b0d2137acc2d6d</anchor>
      <arglist>(const Identity &amp;_modelID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetLinkFromModel::Implementation</name>
    <filename>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</anchorfile>
      <anchor>a49549dd5b2c2b0b5e84303b166a6c4c1</anchor>
      <arglist>(const Identity &amp;_modelID, std::size_t _linkIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</anchorfile>
      <anchor>a4d840f6d29b7388d7640353ea4ca1151</anchor>
      <arglist>(const Identity &amp;_modelID, const std::string &amp;_linkName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetLinkCount</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</anchorfile>
      <anchor>a2011974a1751a56868daf6336ba7d1ea</anchor>
      <arglist>(const Identity &amp;_modelID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetLinkIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</anchorfile>
      <anchor>a8e6fd8e54e17324f8b863b2da4ec5a8d</anchor>
      <arglist>(const Identity &amp;_linkID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetLinkName</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</anchorfile>
      <anchor>a0186531ac741c35ae19f613c796c836a</anchor>
      <arglist>(const Identity &amp;_linkID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetModelOfLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Implementation.html</anchorfile>
      <anchor>a640d594523a4000a0f3dc7c86410f260</anchor>
      <arglist>(const Identity &amp;_linkID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetJointFromModel::Implementation</name>
    <filename>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</anchorfile>
      <anchor>a4c507070c1fc7491cdd00436610ee3bb</anchor>
      <arglist>(const Identity &amp;_modelID, std::size_t _jointIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</anchorfile>
      <anchor>afc3b98b1400aa4bada0249632b17188f</anchor>
      <arglist>(const Identity &amp;_modelID, const std::string &amp;_jointName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetJointCount</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</anchorfile>
      <anchor>ac26642033cef04f297bf84bdcd9f5276</anchor>
      <arglist>(const Identity &amp;_modelID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetJointIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</anchorfile>
      <anchor>aef97db0f5641bc3250cd9dc01884dee1</anchor>
      <arglist>(const Identity &amp;_jointID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetJointName</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</anchorfile>
      <anchor>a04840fc6541159f460d807f195e94352</anchor>
      <arglist>(const Identity &amp;_jointID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetModelOfJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Implementation.html</anchorfile>
      <anchor>a479307efcafa3c70333b3fc1b17482e4</anchor>
      <arglist>(const Identity &amp;_jointID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeFromLink::Implementation</name>
    <filename>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetLinkOfShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</anchorfile>
      <anchor>a7fab1f07b1fa9e715f43770f25974b38</anchor>
      <arglist>(const Identity &amp;_shapeID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</anchorfile>
      <anchor>ac0cb984727a8aad11f9d1a3784833c81</anchor>
      <arglist>(const Identity &amp;_linkID, std::size_t _shapeIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>GetShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</anchorfile>
      <anchor>a9141ca43fba8e93fc8a22250f766ddb9</anchor>
      <arglist>(const Identity &amp;_linkID, const std::string &amp;_shapeName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetShapeCount</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</anchorfile>
      <anchor>a2c92f38ed6b9fbd480770dedfbe115f1</anchor>
      <arglist>(const Identity &amp;_linkID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetShapeIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</anchorfile>
      <anchor>aea5969ba9d03bfada0ac1f04f818c661</anchor>
      <arglist>(const Identity &amp;_shapeID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetShapeName</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Implementation.html</anchorfile>
      <anchor>af536df6391505e717cb030efa8dab5b2</anchor>
      <arglist>(const Identity &amp;_shapeID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetBasicJointState::Implementation</name>
    <filename>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scalar</type>
      <name>GetJointAcceleration</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a3166e96d5497c6856617f91aa962c54e</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scalar</type>
      <name>GetJointForce</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a1e8e3d1a2b8f17c328849eabc632b288</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scalar</type>
      <name>GetJointPosition</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a1d50b38e93ba1b0e9f16b97e49889859</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pose</type>
      <name>GetJointTransform</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a774835a7099dabe63d6116c2ed58996d</anchor>
      <arglist>(const Identity &amp;_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scalar</type>
      <name>GetJointVelocity</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>ab24f5788761b2f02498da9436e98515b</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetBasicJointState::Implementation</name>
    <filename>classignition_1_1physics_1_1SetBasicJointState_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointAcceleration</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>a390980ceece6a86f5c9c9c83f6e3fbf3</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof, Scalar _value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointForce</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>abe6a56be6514b9fe2dc701690247c572</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof, Scalar _value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointPosition</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>ab6f1c993873d545a57cf51503c1fca1d</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof, Scalar _value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Implementation.html</anchorfile>
      <anchor>af8a05cd1e031ae10255a609e68c1b071</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof, Scalar _value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetBasicJointProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1GetBasicJointProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Implementation.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>GetJointDegreesOfFreedom</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Implementation.html</anchorfile>
      <anchor>abe847a42bde2a915e444f9b7143f1bab</anchor>
      <arglist>(const Identity &amp;_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pose</type>
      <name>GetJointTransformFromParent</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Implementation.html</anchorfile>
      <anchor>a7892f0ac2103b5e147ff69fd26c5ad04</anchor>
      <arglist>(const Identity &amp;_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pose</type>
      <name>GetJointTransformToChild</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Implementation.html</anchorfile>
      <anchor>ac00d815983d8070dfd94e4f5bb91b902</anchor>
      <arglist>(const Identity &amp;_id) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointTransformFromParentFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1SetJointTransformFromParentFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformFromParentFeature_1_1Implementation.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointTransformFromParent</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformFromParentFeature_1_1Implementation.html</anchorfile>
      <anchor>af1dcf7b84c793971d28ae004faa2133e</anchor>
      <arglist>(const Identity &amp;_id, const Pose &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointTransformToChildFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1SetJointTransformToChildFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformToChildFeature_1_1Implementation.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointTransformToChild</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformToChildFeature_1_1Implementation.html</anchorfile>
      <anchor>aedecb9af79274241c6e003551d5b4962</anchor>
      <arglist>(const Identity &amp;_id, const Pose &amp;_pose)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointVelocityCommandFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1SetJointVelocityCommandFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetJointVelocityCommandFeature_1_1Implementation.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointVelocityCommand</name>
      <anchorfile>classignition_1_1physics_1_1SetJointVelocityCommandFeature_1_1Implementation.html</anchorfile>
      <anchor>a121b6233ecd1e0b119067ec5a0a7e740</anchor>
      <arglist>(const Identity &amp;_id, std::size_t _dof, Scalar _value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::DetachJointFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1DetachJointFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DetachJoint</name>
      <anchorfile>classignition_1_1physics_1_1DetachJointFeature_1_1Implementation.html</anchorfile>
      <anchor>ac652600d0789563605aba29acad11213</anchor>
      <arglist>(const Identity &amp;_jointID)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AddLinkExternalForceTorque::Implementation</name>
    <filename>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>AngularVectorType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Implementation.html</anchorfile>
      <anchor>a2cd0f862cf04be7312b2f35b3459efbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>LinearVectorType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Implementation.html</anchorfile>
      <anchor>aa687fd522262355776eb8533ba0d6afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddLinkExternalForceInWorld</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Implementation.html</anchorfile>
      <anchor>a82d0fad1468f6aa00a27394bfe4c5f1e</anchor>
      <arglist>(const Identity &amp;_id, const LinearVectorType &amp;_force, const LinearVectorType &amp;_position)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddLinkExternalTorqueInWorld</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Implementation.html</anchorfile>
      <anchor>a2bc89ce6efe0a994dd0a0f5902384ab7</anchor>
      <arglist>(const Identity &amp;_id, const AngularVectorType &amp;_torque)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetPlaneShapeProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Normal</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a3021baf982f7a5d53f95cdfb4c5fc3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Point</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a145081354e455fb8a25bbc97fa5c7865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPlaneShapeNormal</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>abdc560baed860566b6a63cc13aa7d366</anchor>
      <arglist>(const Identity &amp;_planeID, const Normal &amp;_normal)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPlaneShapePoint</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1Implementation.html</anchorfile>
      <anchor>a981bf0c5826bb23e36f06240a929f6e2</anchor>
      <arglist>(const Identity &amp;_planeID, const Point &amp;_point)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachPlaneShapeFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Normal</name>
      <anchorfile>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a3021baf982f7a5d53f95cdfb4c5fc3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Point</name>
      <anchorfile>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a145081354e455fb8a25bbc97fa5c7865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachPlaneShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Implementation.html</anchorfile>
      <anchor>a2564e1ffec05dcc9bd64d82c1a5c69ac</anchor>
      <arglist>(const Identity &amp;_linkID, const std::string &amp;_name, const Normal &amp;_normal, const Point &amp;_point)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetPrismaticJointProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetPrismaticJointProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1SetPrismaticJointProperties_1_1Implementation.html</anchorfile>
      <anchor>a22fd5e2ec3ccac4c43209b473fb9cb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPrismaticJointAxis</name>
      <anchorfile>classignition_1_1physics_1_1SetPrismaticJointProperties_1_1Implementation.html</anchorfile>
      <anchor>a260255259908d41125ac0d49d3e8e2bf</anchor>
      <arglist>(const Identity &amp;_id, const Axis &amp;_axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachPrismaticJointFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Implementation.html</anchorfile>
      <anchor>a22fd5e2ec3ccac4c43209b473fb9cb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>AttachPrismaticJoint</name>
      <anchorfile>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Implementation.html</anchorfile>
      <anchor>a915732279bf2e3b50aec52bd9df1a943</anchor>
      <arglist>(const Identity &amp;_childID, const BaseLinkPtr&lt; PolicyT &gt; &amp;_parent, const std::string &amp;_name, const Axis &amp;_axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CollisionFilterMaskFeature::Implementation</name>
    <filename>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>GetCollisionFilterMask</name>
      <anchorfile>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Implementation.html</anchorfile>
      <anchor>a0cda3cee40cf2efc7c91d5b7f807c68a</anchor>
      <arglist>(const Identity &amp;_shapeID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>RemoveCollisionFilterMask</name>
      <anchorfile>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Implementation.html</anchorfile>
      <anchor>a8d432a3c55b5273267256f019fa6b999</anchor>
      <arglist>(const Identity &amp;_shapeID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetCollisionFilterMask</name>
      <anchorfile>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Implementation.html</anchorfile>
      <anchor>aef8826c11523f316d454891c1adbe550</anchor>
      <arglist>(const Identity &amp;_shapeID, const uint16_t _mask)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::RemoveModelFromWorld::Implementation</name>
    <filename>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ModelRemoved</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>abf721eb1a8b53112eff863922743f70e</anchor>
      <arglist>(const Identity &amp;_modelID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>RemoveModel</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>abd5d98c574255ef65c061863d5edd3e9</anchor>
      <arglist>(const Identity &amp;_modelID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>RemoveModelByIndex</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>a630a78deacd183449274c217c5e7ddd5</anchor>
      <arglist>(const Identity &amp;_worldID, std::size_t _modelIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>RemoveModelByName</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Implementation.html</anchorfile>
      <anchor>ab54fb95cbb61248538c66f4e4a74ee62</anchor>
      <arglist>(const Identity &amp;_worldID, const std::string &amp;_modelName)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetRevoluteJointProperties::Implementation</name>
    <filename>classignition_1_1physics_1_1SetRevoluteJointProperties_1_1Implementation.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Implementation&lt; PolicyT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1SetRevoluteJointProperties_1_1Implementation.html</anchorfile>
      <anchor>adc9be710fd3df1e75bd3240c4ae769fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetRevoluteJointAxis</name>
      <anchorfile>classignition_1_1physics_1_1SetRevoluteJointProperties_1_1Implementation.html</anchorfile>
      <anchor>a02619b2bcd59c7970bf702dce6d0b61a</anchor>
      <arglist>(const Identity &amp;_id, const Axis &amp;_axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Implementation&lt; PolicyT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Implementation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Implementation.html</anchorfile>
      <anchor>ad74cc12651c6704b1b6a560f6d8df133</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Identity</type>
      <name>InitiateEngine</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Implementation.html</anchorfile>
      <anchor>a6003260cc937b7e4d39a08e6eadd65e8</anchor>
      <arglist>(std::size_t engineID=0)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::CompositeData::InsertResult</name>
    <filename>structignition_1_1physics_1_1CompositeData_1_1InsertResult.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>InsertResult &amp;</type>
      <name>operator=</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1InsertResult.html</anchorfile>
      <anchor>a3478178c6b0b0e98c842aaa37999c4e9</anchor>
      <arglist>(const InsertResult &amp;)=delete</arglist>
    </member>
    <member kind="variable">
      <type>Data &amp;</type>
      <name>data</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1InsertResult.html</anchorfile>
      <anchor>ad05509a64790e25cfb28a937bc68114d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>inserted</name>
      <anchorfile>structignition_1_1physics_1_1CompositeData_1_1InsertResult.html</anchorfile>
      <anchor>a3efa1fa549a816052b445e96dec12d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::IsExpectedBy</name>
    <filename>structignition_1_1physics_1_1IsExpectedBy.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>integral_constant&lt; bool, Specification::template Expects&lt; Data &gt;() &gt;</base>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::IsRequiredBy</name>
    <filename>structignition_1_1physics_1_1IsRequiredBy.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>integral_constant&lt; bool, Specification::template AlwaysRequires&lt; Data &gt;() &gt;</base>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetBasicJointProperties::Joint</name>
    <filename>classignition_1_1physics_1_1GetBasicJointProperties_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Joint.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetDegreesOfFreedom</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Joint.html</anchorfile>
      <anchor>a12f84d077f43ad1c6db1cd3bc20c13e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose</type>
      <name>GetTransformFromParent</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Joint.html</anchorfile>
      <anchor>a6e465ede34ce226d87ffdb3f09977945</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose</type>
      <name>GetTransformToChild</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointProperties_1_1Joint.html</anchorfile>
      <anchor>a9744222726ff5aa42854c983e7fc2736</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointTransformFromParentFeature::Joint</name>
    <filename>classignition_1_1physics_1_1SetJointTransformFromParentFeature_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformFromParentFeature_1_1Joint.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformFromParent</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformFromParentFeature_1_1Joint.html</anchorfile>
      <anchor>a5c6aec215d650468d45f501ed0d5961e</anchor>
      <arglist>(const Pose &amp;_pose)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::Joint</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Joint.html</filename>
    <templarg>Policy</templarg>
    <templarg>FeaturesT</templarg>
    <base virtualness="virtual">Entity&lt; Policy, FeaturesT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Joint</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Joint.html</anchorfile>
      <anchor>aee978f4bd1dc0a2d7e0127fc83a62afc</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetJointFromModel::Joint</name>
    <filename>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</anchorfile>
      <anchor>a9df111f6ac6b06b4dc462af88c1111ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</anchorfile>
      <anchor>a57586216af8e47a3c14d590854d7a00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</anchorfile>
      <anchor>abfce090b7cf2b45d19a5c4e7e28e6f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</anchorfile>
      <anchor>ad4727954788c8e05e1f6ae9d4cfe8bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</anchorfile>
      <anchor>a87134aeb7509e3a273f6d526a20a1f7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetName</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Joint.html</anchorfile>
      <anchor>a5b52ba705bd2cbff2d8ba9a1fb0b39d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetBasicJointState::Joint</name>
    <filename>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>GetAcceleration</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a42ff73b25073cb1d0773290b14abf6ba</anchor>
      <arglist>(const std::size_t _dof) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>GetForce</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>addbf419e7d4366d7ba77e0bf0336d807</anchor>
      <arglist>(const std::size_t _dof) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>GetPosition</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>abb90e4d24c49d085599f4d90876cfee9</anchor>
      <arglist>(const std::size_t _dof) const</arglist>
    </member>
    <member kind="function">
      <type>Pose</type>
      <name>GetTransform</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a94261dc625eca04ed69be0cdecdfcf56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>GetVelocity</name>
      <anchorfile>classignition_1_1physics_1_1GetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a07be343d60e4bad2828383e6db361c51</anchor>
      <arglist>(const std::size_t _dof) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetBasicJointState::Joint</name>
    <filename>classignition_1_1physics_1_1SetBasicJointState_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a8b35f32a6a95f385eb012c0acf65692e</anchor>
      <arglist>(const std::size_t _dof, const Scalar _value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>aefcaf06c4e940fe0df7b9593a956648d</anchor>
      <arglist>(const std::size_t _dof, const Scalar _value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>af1df627f29424c70ff8c4e3c8e6df925</anchor>
      <arglist>(const std::size_t _dof, const Scalar _value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classignition_1_1physics_1_1SetBasicJointState_1_1Joint.html</anchorfile>
      <anchor>a9e7e4d47313c83c6634f91c819cb879d</anchor>
      <arglist>(const std::size_t _dof, const Scalar _value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointTransformToChildFeature::Joint</name>
    <filename>classignition_1_1physics_1_1SetJointTransformToChildFeature_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>Pose</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformToChildFeature_1_1Joint.html</anchorfile>
      <anchor>a40238e1d8b7f3859e3a644f68287948e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformToChild</name>
      <anchorfile>classignition_1_1physics_1_1SetJointTransformToChildFeature_1_1Joint.html</anchorfile>
      <anchor>af4a3db0704a509446120e38054f60958</anchor>
      <arglist>(const Pose &amp;_pose)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointVelocityCommandFeature::Joint</name>
    <filename>classignition_1_1physics_1_1SetJointVelocityCommandFeature_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetJointVelocityCommandFeature_1_1Joint.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocityCommand</name>
      <anchorfile>classignition_1_1physics_1_1SetJointVelocityCommandFeature_1_1Joint.html</anchorfile>
      <anchor>a24e14b1d2aae2f3a204fe63a4d4d7c43</anchor>
      <arglist>(const std::size_t _dof, const Scalar _value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::DetachJointFeature::Joint</name>
    <filename>classignition_1_1physics_1_1DetachJointFeature_1_1Joint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Joint&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>Detach</name>
      <anchorfile>classignition_1_1physics_1_1DetachJointFeature_1_1Joint.html</anchorfile>
      <anchor>abb7a2b60240651d16e17d02eb6f636cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Joint&lt; PolicyT, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Joint.html</filename>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Joint</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Joint.html</anchorfile>
      <anchor>aee978f4bd1dc0a2d7e0127fc83a62afc</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::JointFrameSemantics</name>
    <filename>classignition_1_1physics_1_1JointFrameSemantics.html</filename>
    <base virtualness="virtual">ignition::physics::FrameSemantics</base>
    <member kind="typedef">
      <type>FrameSemantics::Frame&lt; Policy, Features &gt;</type>
      <name>Joint</name>
      <anchorfile>classignition_1_1physics_1_1JointFrameSemantics.html</anchorfile>
      <anchor>ab8abb2bacca2deccec9a1cd863ea445d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::JointPositions</name>
    <filename>structignition_1_1physics_1_1JointPositions.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1JointPositions.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>dofs</name>
      <anchorfile>structignition_1_1physics_1_1JointPositions.html</anchorfile>
      <anchor>adfcdfb5d64985f5805025d7717946ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>positions</name>
      <anchorfile>structignition_1_1physics_1_1JointPositions.html</anchorfile>
      <anchor>a649cc300c964845ccc272fd2229b6ed4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachRevoluteJointFeature::Link</name>
    <filename>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Link.html</anchorfile>
      <anchor>adc9be710fd3df1e75bd3240c4ae769fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RevoluteJointPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>JointPtrType</name>
      <anchorfile>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Link.html</anchorfile>
      <anchor>aed4100b75c40c685fed4604c43a9b965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JointPtrType</type>
      <name>AttachRevoluteJoint</name>
      <anchorfile>classignition_1_1physics_1_1AttachRevoluteJointFeature_1_1Link.html</anchorfile>
      <anchor>a1eb8a6b3406a345cce5168ad28cf4628</anchor>
      <arglist>(const BaseLinkPtr&lt; PolicyT &gt; &amp;_parent, const std::string &amp;_name=&quot;revolute&quot;, const Axis &amp;_axis=Axis::UnitX())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfCollision::Link</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfCollision_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfCollision_1_1Link.html</anchorfile>
      <anchor>abf38c7bcbbab8369c6155f0861bfc012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>ConstructCollision</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfCollision_1_1Link.html</anchorfile>
      <anchor>a731308d3eaf0ba345ce3f60a8d7e65c1</anchor>
      <arglist>(const ::sdf::Collision &amp;_collision)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachSphereShapeFeature::Link</name>
    <filename>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Link.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Link.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Link.html</anchorfile>
      <anchor>a2840b4ee2a7b91a1762c371c26147b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>AttachSphereShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachSphereShapeFeature_1_1Link.html</anchorfile>
      <anchor>a660433d8e7c33f6223dcf0e5b6470f0e</anchor>
      <arglist>(const std::string &amp;_name, Scalar _radius=1.0, const PoseType &amp;_pose=PoseType::Identity())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::mesh::AttachMeshShapeFeature::Link</name>
    <filename>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Link.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Link.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Link.html</anchorfile>
      <anchor>a4040073d8f44f428451b40976258c8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>AttachMeshShape</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1AttachMeshShapeFeature_1_1Link.html</anchorfile>
      <anchor>add51202b2c75b3762d1c68ee6801e249</anchor>
      <arglist>(const std::string &amp;_name, const ignition::common::Mesh &amp;_mesh, const PoseType &amp;_pose=PoseType::Identity(), const Dimensions &amp;_scale=Dimensions::Ones())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetLinkBoundingBox::Link</name>
    <filename>classignition_1_1physics_1_1GetLinkBoundingBox_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::GetShapeFromLink::Link</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AlignedBox &gt;</type>
      <name>AlignedBoxType</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkBoundingBox_1_1Link.html</anchorfile>
      <anchor>afdeb1153e6240957d11b32320bafd1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AlignedBoxType</type>
      <name>GetAxisAlignedBoundingBox</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkBoundingBox_1_1Link.html</anchorfile>
      <anchor>a921aee83c5123a1535ae9b59d0fea7eb</anchor>
      <arglist>(const FrameID &amp;_referenceFrame=FrameID::World()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfVisual::Link</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfVisual_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>ConstructVisual</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfVisual_1_1Link.html</anchorfile>
      <anchor>a0648af7e3a2c3f3a854a89b62f6808dd</anchor>
      <arglist>(const ::sdf::Visual &amp;_visual)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeFromLink::Link</name>
    <filename>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>af02e76eb77dce9e07c9b5595262b0fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>abf38c7bcbbab8369c6155f0861bfc012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>GetShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>ae853259208fbf639565d5eaf71d32a6a</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>ConstShapePtrType</type>
      <name>GetShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>ada16ca2aa83ab7f8dbb5da7912f999b8</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>GetShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>a14675d4c74588e0006400a6b6e0b8b54</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>ConstShapePtrType</type>
      <name>GetShape</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>aac806d146197530c81432b7cf13150af</anchor>
      <arglist>(const std::string &amp;_name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetShapeCount</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Link.html</anchorfile>
      <anchor>a7e3bc921f3fd58ee42b4d75c9e1dadf4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetLinkFromModel::Link</name>
    <filename>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</anchorfile>
      <anchor>a9df111f6ac6b06b4dc462af88c1111ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</anchorfile>
      <anchor>a57586216af8e47a3c14d590854d7a00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</anchorfile>
      <anchor>abfce090b7cf2b45d19a5c4e7e28e6f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</anchorfile>
      <anchor>ad4727954788c8e05e1f6ae9d4cfe8bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</anchorfile>
      <anchor>a87134aeb7509e3a273f6d526a20a1f7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetName</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Link.html</anchorfile>
      <anchor>a5b52ba705bd2cbff2d8ba9a1fb0b39d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AddLinkExternalForceTorque::Link</name>
    <filename>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::FrameSemantics::Frame</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>AngularVectorType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>a2cd0f862cf04be7312b2f35b3459efbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>LinearVectorType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>aa687fd522262355776eb8533ba0d6afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; RelativeForce &gt;</type>
      <name>RelativeForceType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>acca7c193437bf0101c6f72a86cdba2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; RelativePosition &gt;</type>
      <name>RelativePositionType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>a095ce5e37ff4a7cbb24598e1b2e05df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; RelativeTorque &gt;</type>
      <name>RelativeTorqueType</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>a7ee06b67ca6a85589e1de39a233c71ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddExternalForce</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>a96a8e0fa7c5a7ff5ac7c1158eadcbb8d</anchor>
      <arglist>(const RelativeForceType &amp;_force, const RelativePositionType &amp;_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddExternalForce</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>adc7219126dfede68e8af2a5d360e009f</anchor>
      <arglist>(const LinearVectorType &amp;_force, const FrameID &amp;_forceInCoordinatesOf=FrameID::World(), const LinearVectorType &amp;_position=LinearVectorType::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddExternalTorque</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>a6635f82cdf4f99af8906ba4a64f0e460</anchor>
      <arglist>(const RelativeTorqueType &amp;_torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddExternalTorque</name>
      <anchorfile>classignition_1_1physics_1_1AddLinkExternalForceTorque_1_1Link.html</anchorfile>
      <anchor>a34de9f2a7df0045764981170e54fbdf4</anchor>
      <arglist>(const AngularVectorType &amp;_torque, const FrameID &amp;_inCoordinatesOf=FrameID::World())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachBoxShapeFeature::Link</name>
    <filename>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Link.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Link.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Link.html</anchorfile>
      <anchor>a8667017ef3ff00c1dd3af52d597d2870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>AttachBoxShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachBoxShapeFeature_1_1Link.html</anchorfile>
      <anchor>aab6cf1b4b7ff5652364028ba23f35077</anchor>
      <arglist>(const std::string &amp;_name=&quot;box&quot;, const Dimensions &amp;_size=Dimensions::Constant(1.0), const PoseType &amp;_pose=PoseType::Identity())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachCylinderShapeFeature::Link</name>
    <filename>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Link.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Link.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CylinderShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Link.html</anchorfile>
      <anchor>a253c59dd5c7f3c72a4e239d1e8dac142</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ShapePtrType</type>
      <name>AttachCylinderShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachCylinderShapeFeature_1_1Link.html</anchorfile>
      <anchor>a6a4347f75079d7d8e19d98894217e9b6</anchor>
      <arglist>(const std::string &amp;_name=&quot;cylinder&quot;, Scalar _radius=1.0, Scalar _height=1.0, const PoseType &amp;_pose=PoseType::Identity())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachPlaneShapeFeature::Link</name>
    <filename>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Normal</name>
      <anchorfile>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Link.html</anchorfile>
      <anchor>a3021baf982f7a5d53f95cdfb4c5fc3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Point</name>
      <anchorfile>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Link.html</anchorfile>
      <anchor>a145081354e455fb8a25bbc97fa5c7865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PlaneShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>AttachPlaneShape</name>
      <anchorfile>classignition_1_1physics_1_1AttachPlaneShapeFeature_1_1Link.html</anchorfile>
      <anchor>ac8d6b1dd9bd01585781528fd9eb094f2</anchor>
      <arglist>(const std::string &amp;_name, const Normal &amp;_normal, const Point &amp;_point=Point::Zero())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::AttachPrismaticJointFeature::Link</name>
    <filename>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Link.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Link&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Link.html</anchorfile>
      <anchor>a22fd5e2ec3ccac4c43209b473fb9cb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrismaticJointPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>JointPtrType</name>
      <anchorfile>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Link.html</anchorfile>
      <anchor>a86f5e107397594cfacb1084d411e8fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JointPtrType</type>
      <name>AttachPrismaticJoint</name>
      <anchorfile>classignition_1_1physics_1_1AttachPrismaticJointFeature_1_1Link.html</anchorfile>
      <anchor>a67ed776e910ac45eb3ddaf8fe1b74f10</anchor>
      <arglist>(const BaseLinkPtr&lt; PolicyT &gt; &amp;_parent, const std::string &amp;_name=&quot;prismatic&quot;, const Axis &amp;_axis=Axis::UnitX())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::Link</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Link.html</filename>
    <templarg>Policy</templarg>
    <templarg>FeaturesT</templarg>
    <base virtualness="virtual">Entity&lt; Policy, FeaturesT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Link</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Link.html</anchorfile>
      <anchor>a91c41bfcc6510543422798ce0cb226de</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Link&lt; PolicyT, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Link.html</filename>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Link</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Link.html</anchorfile>
      <anchor>a91c41bfcc6510543422798ce0cb226de</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::LinkFrameSemantics</name>
    <filename>classignition_1_1physics_1_1LinkFrameSemantics.html</filename>
    <base virtualness="virtual">ignition::physics::FrameSemantics</base>
    <member kind="typedef">
      <type>FrameSemantics::Frame&lt; Policy, Features &gt;</type>
      <name>Link</name>
      <anchorfile>classignition_1_1physics_1_1LinkFrameSemantics.html</anchorfile>
      <anchor>a9cf8ff20d1c3765305c991290c93ae48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::mesh::SetMeshShapeProperties::MeshShape</name>
    <filename>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties_1_1MeshShape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Dimensions</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties_1_1MeshShape.html</anchorfile>
      <anchor>a0fb3dd9344402b5c873b47dce777dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScale</name>
      <anchorfile>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties_1_1MeshShape.html</anchorfile>
      <anchor>a6ce9412b0d2150d1e02f7f3688543d29</anchor>
      <arglist>(const Dimensions &amp;_dimensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetModelBoundingBox::Model</name>
    <filename>classignition_1_1physics_1_1GetModelBoundingBox_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::GetLinkFromModel::Model</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AlignedBox &gt;</type>
      <name>AlignedBoxType</name>
      <anchorfile>classignition_1_1physics_1_1GetModelBoundingBox_1_1Model.html</anchorfile>
      <anchor>afdeb1153e6240957d11b32320bafd1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AlignedBoxType</type>
      <name>GetAxisAlignedBoundingBox</name>
      <anchorfile>classignition_1_1physics_1_1GetModelBoundingBox_1_1Model.html</anchorfile>
      <anchor>a921aee83c5123a1535ae9b59d0fea7eb</anchor>
      <arglist>(const FrameID &amp;_referenceFrame=FrameID::World()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::RemoveModelFromWorld::Model</name>
    <filename>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>Remove</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Model.html</anchorfile>
      <anchor>ad20555071ce1e4d03ef85941a87dbdc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Removed</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1Model.html</anchorfile>
      <anchor>a4c36a09a6179d42597c7f8a6eac691e2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfJoint::Model</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfJoint_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>JointPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>JointPtrType</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfJoint_1_1Model.html</anchorfile>
      <anchor>a0682545eebb825a6d12a0d147a08b93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JointPtrType</type>
      <name>ConstructJoint</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfJoint_1_1Model.html</anchorfile>
      <anchor>aae37d299b5c8a6af20c06859252830e7</anchor>
      <arglist>(const ::sdf::Joint &amp;_joint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfLink::Model</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfLink_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>LinkPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>LinkPtrType</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfLink_1_1Model.html</anchorfile>
      <anchor>a1d789fe95d2086c739898d974983d905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LinkPtrType</type>
      <name>ConstructLink</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfLink_1_1Model.html</anchorfile>
      <anchor>a0a599eeb2cdf8558d579a9627a4ae018</anchor>
      <arglist>(const ::sdf::Link &amp;_link)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyLinkFeature::Model</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyLinkFeature_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>LinkPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>LinkPtrType</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyLinkFeature_1_1Model.html</anchorfile>
      <anchor>a1d789fe95d2086c739898d974983d905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LinkPtrType</type>
      <name>ConstructEmptyLink</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyLinkFeature_1_1Model.html</anchorfile>
      <anchor>aba6713e2c74290b54cea4796ed9a4cf5</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetLinkFromModel::Model</name>
    <filename>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstLinkPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstLinkPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>a570459b76ecec818e9febd3aceec69ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>LinkPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>a1d789fe95d2086c739898d974983d905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LinkPtrType</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>ad7381a11a92f858a8172580c9be88586</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>ConstLinkPtrType</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>a15b4bd0066d037795ea68449c9f95289</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>LinkPtrType</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>af7af52da11cbe41ea3e8b08e8b618360</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>ConstLinkPtrType</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>a6e266c3487e9c9050b35c19048075180</anchor>
      <arglist>(const std::string &amp;_name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetLinkCount</name>
      <anchorfile>classignition_1_1physics_1_1GetLinkFromModel_1_1Model.html</anchorfile>
      <anchor>ad9dc6d660a7e72097490325cc2df9082</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::Model</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Model.html</filename>
    <templarg>Policy</templarg>
    <templarg>FeaturesT</templarg>
    <base virtualness="virtual">Entity&lt; Policy, FeaturesT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Model</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Model.html</anchorfile>
      <anchor>aae0d79bd804aefe47c7401520177f3e9</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetModelFromWorld::Model</name>
    <filename>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstWorldPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstWorldPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</anchorfile>
      <anchor>a0f3e00e87bcce54fbabc86bbb1c87b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WorldPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>WorldPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</anchorfile>
      <anchor>a8c2b9a13d99d7ceaa51bb62c6a26f5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</anchorfile>
      <anchor>abfce090b7cf2b45d19a5c4e7e28e6f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetName</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</anchorfile>
      <anchor>a5b52ba705bd2cbff2d8ba9a1fb0b39d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldPtrType</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</anchorfile>
      <anchor>a80cfcbc6f3dc479a0a8490e4a65c9d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstWorldPtrType</type>
      <name>GetWorld</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1Model.html</anchorfile>
      <anchor>a55d2810cb7e69e12c938f481a586ce2b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetJointFromModel::Model</name>
    <filename>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Model&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstJointPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstJointPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>a8e03b3083e6016fe008919e6253f42f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JointPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>JointPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>a0682545eebb825a6d12a0d147a08b93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JointPtrType</type>
      <name>GetJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>aef20b7e3b3c407290c49e58494a93104</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>ConstJointPtrType</type>
      <name>GetJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>a92f98d825674756f04a0fdc8dc6ae49d</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>JointPtrType</type>
      <name>GetJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>ae8912a8a87d211fb4c8c822a7d036c27</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>ConstJointPtrType</type>
      <name>GetJoint</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>a7a0d3510c939e6b14f337104a39d4612</anchor>
      <arglist>(const std::string &amp;_name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetJointCount</name>
      <anchorfile>classignition_1_1physics_1_1GetJointFromModel_1_1Model.html</anchorfile>
      <anchor>a31393b773de19de3735d39b8e2786261</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Model&lt; PolicyT, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Model.html</filename>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Model</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Model.html</anchorfile>
      <anchor>aae0d79bd804aefe47c7401520177f3e9</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ModelFrameSemantics</name>
    <filename>classignition_1_1physics_1_1ModelFrameSemantics.html</filename>
    <base virtualness="virtual">ignition::physics::FrameSemantics</base>
    <member kind="typedef">
      <type>FrameSemantics::Frame&lt; Policy, Features &gt;</type>
      <name>Model</name>
      <anchorfile>classignition_1_1physics_1_1ModelFrameSemantics.html</anchorfile>
      <anchor>aad77d464d524d4389fe1361ccc8bc37f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::OperateOnSpecifiedData</name>
    <filename>classignition_1_1physics_1_1OperateOnSpecifiedData.html</filename>
    <templarg></templarg>
    <templarg>SpecFinder</templarg>
    <templarg>Operation</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Operate</name>
      <anchorfile>classignition_1_1physics_1_1OperateOnSpecifiedData.html</anchorfile>
      <anchor>a9af33c545294547977f90f17bfa14537</anchor>
      <arglist>(Performer *_performer, CompositeType &amp;_data, const DataStatusMask &amp;_mask, const bool _onlyCompile=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::PIDValues</name>
    <filename>structignition_1_1physics_1_1PIDValues.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>D</name>
      <anchorfile>structignition_1_1physics_1_1PIDValues.html</anchorfile>
      <anchor>ad8657a5ec76e12f3066fb4b4eb75ace9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>I</name>
      <anchorfile>structignition_1_1physics_1_1PIDValues.html</anchorfile>
      <anchor>a07eb382f5743a852ab6f175e5db993f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P</name>
      <anchorfile>structignition_1_1physics_1_1PIDValues.html</anchorfile>
      <anchor>a8019aa9167c19c810aefa4cd5c0b0ab5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetPlaneShapeProperties::PlaneShape</name>
    <filename>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1PlaneShape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Normal</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1PlaneShape.html</anchorfile>
      <anchor>a3021baf982f7a5d53f95cdfb4c5fc3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Point</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1PlaneShape.html</anchorfile>
      <anchor>a145081354e455fb8a25bbc97fa5c7865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormal</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1PlaneShape.html</anchorfile>
      <anchor>a9ea40e4aa72f14c8457c4db6629a4f22</anchor>
      <arglist>(const Normal &amp;_normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPoint</name>
      <anchorfile>classignition_1_1physics_1_1SetPlaneShapeProperties_1_1PlaneShape.html</anchorfile>
      <anchor>a801d6dabc296fd9b3cff431bb1717798</anchor>
      <arglist>(const Point &amp;_point)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::Point</name>
    <filename>structignition_1_1physics_1_1Point.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>inCoordinatesOf</name>
      <anchorfile>structignition_1_1physics_1_1Point.html</anchorfile>
      <anchor>a96fa6ecf184671b89afa0d70b80189a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ignition::math::Vector3d</type>
      <name>point</name>
      <anchorfile>structignition_1_1physics_1_1Point.html</anchorfile>
      <anchor>afdd7363006823656c7858b12127f9eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>relativeTo</name>
      <anchorfile>structignition_1_1physics_1_1Point.html</anchorfile>
      <anchor>ace7cdb20ce077a5298e3282d9b004310</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetPrismaticJointProperties::PrismaticJoint</name>
    <filename>classignition_1_1physics_1_1SetPrismaticJointProperties_1_1PrismaticJoint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; LinearVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1SetPrismaticJointProperties_1_1PrismaticJoint.html</anchorfile>
      <anchor>a22fd5e2ec3ccac4c43209b473fb9cb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAxis</name>
      <anchorfile>classignition_1_1physics_1_1SetPrismaticJointProperties_1_1PrismaticJoint.html</anchorfile>
      <anchor>ae7d82ae1f2401c19eee2718637661ea4</anchor>
      <arglist>(const Axis &amp;_axis)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ReadOptions</name>
    <filename>structignition_1_1physics_1_1ReadOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>ReadOptions</name>
      <anchorfile>structignition_1_1physics_1_1ReadOptions.html</anchorfile>
      <anchor>a4c8e2600e9dcc62fff0c722ac38bcce7</anchor>
      <arglist>(const bool _onlyUnqueried=true)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyReadUnqueriedData</name>
      <anchorfile>structignition_1_1physics_1_1ReadOptions.html</anchorfile>
      <anchor>ab2ebf060a6174ef1e7bc4b647034eecc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::RelativeQuantity</name>
    <filename>classignition_1_1physics_1_1RelativeQuantity.html</filename>
    <templarg>Q</templarg>
    <templarg>Dim</templarg>
    <templarg>CoordinateSpace</templarg>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a33cede6b934046a29e456d31efa91468</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a33cede6b934046a29e456d31efa91468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Q</type>
      <name>Quantity</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>af0eef64f518866ae2e4f17c40c4beed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordinateSpace</type>
      <name>Space</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a51df6166a970a50290ad7f7ff52e4f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeQuantity</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a7e1e601f9b9885bb78bad983b0a20d11</anchor>
      <arglist>(const FrameID &amp;_parentID, Args &amp;&amp;... _args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeQuantity</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a7b34cb793b3ef25eac6a6173789ca21a</anchor>
      <arglist>(const Q &amp;_rawValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MoveToNewParentFrame</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>af237acbd0590c52099ffc7996b9ecd11</anchor>
      <arglist>(const FrameID &amp;_newParentFrame)</arglist>
    </member>
    <member kind="function">
      <type>const FrameID &amp;</type>
      <name>ParentFrame</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a243b26e1704da4c61ebf5f558d295b40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Q &amp;</type>
      <name>RelativeToParent</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a1a8304484d1c032ccbd4346c10b4a908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Q &amp;</type>
      <name>RelativeToParent</name>
      <anchorfile>classignition_1_1physics_1_1RelativeQuantity.html</anchorfile>
      <anchor>a86577c799b26986deed71c55b1f36428</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::RemoveModelFromWorld</name>
    <filename>classignition_1_1physics_1_1RemoveModelFromWorld.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::RemoveModelFromWorld::Implementation</class>
    <class kind="class">ignition::physics::RemoveModelFromWorld::Model</class>
    <class kind="class">ignition::physics::RemoveModelFromWorld::World</class>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::RequestEngine</name>
    <filename>structignition_1_1physics_1_1RequestEngine.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>EnginePtr&lt; FeaturePolicyT, FeatureListT &gt;</type>
      <name>EnginePtrType</name>
      <anchorfile>structignition_1_1physics_1_1RequestEngine.html</anchorfile>
      <anchor>a44e1bd3c3c72fd1db4e75d5983d6194e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeatureListT</type>
      <name>Features</name>
      <anchorfile>structignition_1_1physics_1_1RequestEngine.html</anchorfile>
      <anchor>af93e68f846a7ae2f6ec49de956d92f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EnginePtrType</type>
      <name>From</name>
      <anchorfile>structignition_1_1physics_1_1RequestEngine.html</anchorfile>
      <anchor>aa04799d42bf6171a8e5cb7e83c631aaa</anchor>
      <arglist>(const PtrT &amp;_pimpl, const std::size_t _engineID=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::set&lt; std::string &gt;</type>
      <name>MissingFeatureNames</name>
      <anchorfile>structignition_1_1physics_1_1RequestEngine.html</anchorfile>
      <anchor>aa3d508a2855cd25b81216b0d56476214</anchor>
      <arglist>(const PtrT &amp;_pimpl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Verify</name>
      <anchorfile>structignition_1_1physics_1_1RequestEngine.html</anchorfile>
      <anchor>ab0eaebd775b05117b75148f1ea972b97</anchor>
      <arglist>(const PtrT &amp;_pimpl)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::RequestFeatures</name>
    <filename>structignition_1_1physics_1_1RequestFeatures.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename ToFeatureList::Features</type>
      <name>Features</name>
      <anchorfile>structignition_1_1physics_1_1RequestFeatures.html</anchorfile>
      <anchor>a2968e2bc0880960c2477060f841fc677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EntityPtr&lt; EntityT&lt; PolicyT, ToFeatureList &gt; &gt;</type>
      <name>From</name>
      <anchorfile>structignition_1_1physics_1_1RequestFeatures.html</anchorfile>
      <anchor>a3d1bcca703844107c8dc558a46d37857</anchor>
      <arglist>(const EntityPtr&lt; EntityT&lt; PolicyT, FromFeatureList &gt;&gt; &amp;_from)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::set&lt; std::string &gt;</type>
      <name>MissingFeatureNames</name>
      <anchorfile>structignition_1_1physics_1_1RequestFeatures.html</anchorfile>
      <anchor>a443a11ec6b3f44dff5f22b6ec6a72bc8</anchor>
      <arglist>(const EntityPtr&lt; EntityT&lt; PolicyT, FromFeatureList &gt;&gt; &amp;_entity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::RequireData&lt; Required &gt;</name>
    <filename>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Required</type>
      <name>RequiredData</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>afc0fc1cf3d431779cbe6a27d52c577ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequireData&lt; Required &gt;</type>
      <name>Specification</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>a10924605ebeb33db21289f4b0385d207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequireData</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>aead67e37baaaaf2ce75a3197f80e72a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequireData</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>a6aac1737ebbdc2754a46a4fea7198d78</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Data &amp;</type>
      <name>Get</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>a21153cd61b4238b8f0c6020ffdd61ee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>AlwaysRequires</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>ae324510201c335567e98628fcea86be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>detail::PrivateRequireData&lt; Required &gt;</type>
      <name>privateRequireData</name>
      <anchorfile>classignition_1_1physics_1_1RequireData_3_01Required_01_4.html</anchorfile>
      <anchor>a0f0a43c6d941a460ad1412ff0c79371c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::dartsim::RetrieveWorld</name>
    <filename>classignition_1_1physics_1_1dartsim_1_1RetrieveWorld.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::dartsim::RetrieveWorld::Implementation</class>
    <class kind="class">ignition::physics::dartsim::RetrieveWorld::World</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetRevoluteJointProperties::RevoluteJoint</name>
    <filename>classignition_1_1physics_1_1SetRevoluteJointProperties_1_1RevoluteJoint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AngularVector &gt;</type>
      <name>Axis</name>
      <anchorfile>classignition_1_1physics_1_1SetRevoluteJointProperties_1_1RevoluteJoint.html</anchorfile>
      <anchor>adc9be710fd3df1e75bd3240c4ae769fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAxis</name>
      <anchorfile>classignition_1_1physics_1_1SetRevoluteJointProperties_1_1RevoluteJoint.html</anchorfile>
      <anchor>ae7d82ae1f2401c19eee2718637661ea4</anchor>
      <arglist>(const Axis &amp;_axis)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::ServoControlCommands</name>
    <filename>structignition_1_1physics_1_1ServoControlCommands.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1ServoControlCommands.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GeneralizedParameters &gt;</type>
      <name>commands</name>
      <anchorfile>structignition_1_1physics_1_1ServoControlCommands.html</anchorfile>
      <anchor>aeb6a13cd37b311d7c34d6ee052b971fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PIDValues &gt;</type>
      <name>gains</name>
      <anchorfile>structignition_1_1physics_1_1ServoControlCommands.html</anchorfile>
      <anchor>ad9882499db496d9b773ef0f60e9ce713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetBasicJointState</name>
    <filename>classignition_1_1physics_1_1SetBasicJointState.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::SetBasicJointState::Implementation</class>
    <class kind="class">ignition::physics::SetBasicJointState::Joint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetBoxShapeProperties</name>
    <filename>classignition_1_1physics_1_1SetBoxShapeProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; BoxShapeCast &gt;</base>
    <class kind="class">ignition::physics::SetBoxShapeProperties::BoxShape</class>
    <class kind="class">ignition::physics::SetBoxShapeProperties::Implementation</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetCylinderShapeProperties</name>
    <filename>classignition_1_1physics_1_1SetCylinderShapeProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; CylinderShapeCast &gt;</base>
    <class kind="class">ignition::physics::SetCylinderShapeProperties::CylinderShape</class>
    <class kind="class">ignition::physics::SetCylinderShapeProperties::Implementation</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetFreeGroupWorldPose</name>
    <filename>classignition_1_1physics_1_1SetFreeGroupWorldPose.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; FindFreeGroupFeature &gt;</base>
    <class kind="class">ignition::physics::SetFreeGroupWorldPose::FreeGroup</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldPose::Implementation</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetFreeGroupWorldVelocity</name>
    <filename>classignition_1_1physics_1_1SetFreeGroupWorldVelocity.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; FindFreeGroupFeature &gt;</base>
    <class kind="class">ignition::physics::SetFreeGroupWorldVelocity::FreeGroup</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldVelocity::Implementation</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointTransformFromParentFeature</name>
    <filename>classignition_1_1physics_1_1SetJointTransformFromParentFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::SetJointTransformFromParentFeature::Implementation</class>
    <class kind="class">ignition::physics::SetJointTransformFromParentFeature::Joint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointTransformToChildFeature</name>
    <filename>classignition_1_1physics_1_1SetJointTransformToChildFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::SetJointTransformToChildFeature::Implementation</class>
    <class kind="class">ignition::physics::SetJointTransformToChildFeature::Joint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetJointVelocityCommandFeature</name>
    <filename>classignition_1_1physics_1_1SetJointVelocityCommandFeature.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::SetJointVelocityCommandFeature::Implementation</class>
    <class kind="class">ignition::physics::SetJointVelocityCommandFeature::Joint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::mesh::SetMeshShapeProperties</name>
    <filename>classignition_1_1physics_1_1mesh_1_1SetMeshShapeProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; MeshShapeCast &gt;</base>
    <class kind="class">ignition::physics::mesh::SetMeshShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::mesh::SetMeshShapeProperties::MeshShape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetPlaneShapeProperties</name>
    <filename>classignition_1_1physics_1_1SetPlaneShapeProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; PlaneShapeCast &gt;</base>
    <class kind="class">ignition::physics::SetPlaneShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::SetPlaneShapeProperties::PlaneShape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetPrismaticJointProperties</name>
    <filename>classignition_1_1physics_1_1SetPrismaticJointProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; PrismaticJointCast &gt;</base>
    <class kind="class">ignition::physics::SetPrismaticJointProperties::Implementation</class>
    <class kind="class">ignition::physics::SetPrismaticJointProperties::PrismaticJoint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetRevoluteJointProperties</name>
    <filename>classignition_1_1physics_1_1SetRevoluteJointProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; RevoluteJointCast &gt;</base>
    <class kind="class">ignition::physics::SetRevoluteJointProperties::Implementation</class>
    <class kind="class">ignition::physics::SetRevoluteJointProperties::RevoluteJoint</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetShapeCollisionProperties</name>
    <filename>classignition_1_1physics_1_1SetShapeCollisionProperties.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::SetShapeCollisionProperties::Implementation</class>
    <class kind="class">ignition::physics::SetShapeCollisionProperties::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetShapeKinematicProperties</name>
    <filename>classignition_1_1physics_1_1SetShapeKinematicProperties.html</filename>
    <base virtualness="virtual">ignition::physics::Feature</base>
    <class kind="class">ignition::physics::SetShapeKinematicProperties::Implementation</class>
    <class kind="class">ignition::physics::SetShapeKinematicProperties::Shape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetSphereShapeProperties</name>
    <filename>classignition_1_1physics_1_1SetSphereShapeProperties.html</filename>
    <base virtualness="virtual">FeatureWithRequirements&lt; SphereShapeCast &gt;</base>
    <class kind="class">ignition::physics::SetSphereShapeProperties::Implementation</class>
    <class kind="class">ignition::physics::SetSphereShapeProperties::SphereShape</class>
  </compound>
  <compound kind="class">
    <name>ignition::physics::CollisionFilterMaskFeature::Shape</name>
    <filename>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>uint16_t</type>
      <name>GetCollisionFilterMask</name>
      <anchorfile>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Shape.html</anchorfile>
      <anchor>a9ef56f8b5d976f2ab7b54037c1cdb0fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveCollisionFilterMask</name>
      <anchorfile>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Shape.html</anchorfile>
      <anchor>abbafedc76d99ed5e195c7e4771029d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCollisionFilterMask</name>
      <anchorfile>classignition_1_1physics_1_1CollisionFilterMaskFeature_1_1Shape.html</anchorfile>
      <anchor>a6bdf548bba7f8258b1688feaa4023da7</anchor>
      <arglist>(const uint16_t _mask)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetShapeKinematicProperties::Shape</name>
    <filename>classignition_1_1physics_1_1SetShapeKinematicProperties_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeKinematicProperties_1_1Shape.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRelativeTransform</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeKinematicProperties_1_1Shape.html</anchorfile>
      <anchor>ab755745b4fa76ff0dd9c096ab591584c</anchor>
      <arglist>(const PoseType &amp;_pose)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetShapeCollisionProperties::Shape</name>
    <filename>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Shape.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrictionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Shape.html</anchorfile>
      <anchor>a2dd869f41067ea96fa16ce588b7652af</anchor>
      <arglist>(const BaseShapePtr&lt; PolicyT &gt; &amp;_other, Scalar _value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitutionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1SetShapeCollisionProperties_1_1Shape.html</anchorfile>
      <anchor>aff2c16940ef4b7feaeafd3c3d23f7471</anchor>
      <arglist>(const BaseShapePtr&lt; PolicyT &gt; &amp;_other, Scalar _value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeKinematicProperties::Shape</name>
    <filename>classignition_1_1physics_1_1GetShapeKinematicProperties_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Pose &gt;</type>
      <name>PoseType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeKinematicProperties_1_1Shape.html</anchorfile>
      <anchor>a9c4f82162a5aace86e981bda66a58e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PoseType</type>
      <name>GetRelativeTransform</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeKinematicProperties_1_1Shape.html</anchorfile>
      <anchor>a48ae2b8fab2151f15b06fd61208e11ff</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeBoundingBox::Shape</name>
    <filename>classignition_1_1physics_1_1GetShapeBoundingBox_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; AlignedBox &gt;</type>
      <name>AlignedBoxType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeBoundingBox_1_1Shape.html</anchorfile>
      <anchor>afdeb1153e6240957d11b32320bafd1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AlignedBoxType</type>
      <name>GetAxisAlignedBoundingBox</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeBoundingBox_1_1Shape.html</anchorfile>
      <anchor>a921aee83c5123a1535ae9b59d0fea7eb</anchor>
      <arglist>(const FrameID &amp;_referenceFrame=FrameID::World()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeCollisionProperties::Shape</name>
    <filename>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Shape.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>GetFrictionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Shape.html</anchorfile>
      <anchor>aedcff9218f3b6bcdb76b13dbbd6be99a</anchor>
      <arglist>(const BaseShapePtr&lt; PolicyT &gt; &amp;_other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>GetRestitutionCoefficient</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeCollisionProperties_1_1Shape.html</anchorfile>
      <anchor>aadc583aad193e87a4465b0862b465d13</anchor>
      <arglist>(const BaseShapePtr&lt; PolicyT &gt; &amp;_other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::Shape</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Shape.html</filename>
    <templarg>Policy</templarg>
    <templarg>FeaturesT</templarg>
    <base virtualness="virtual">Entity&lt; Policy, FeaturesT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Shape</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Shape.html</anchorfile>
      <anchor>a396c8e881ccf475a065aecce426f9796</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetShapeFromLink::Shape</name>
    <filename>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Shape&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstLinkPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstLinkPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</anchorfile>
      <anchor>a570459b76ecec818e9febd3aceec69ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>LinkPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</anchorfile>
      <anchor>a1d789fe95d2086c739898d974983d905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</anchorfile>
      <anchor>abfce090b7cf2b45d19a5c4e7e28e6f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkPtrType</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</anchorfile>
      <anchor>ad2b4a4196613001afe81fa18137c94e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstLinkPtrType</type>
      <name>GetLink</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</anchorfile>
      <anchor>a4c66c092977820c61327e7cb0eba2322</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetName</name>
      <anchorfile>classignition_1_1physics_1_1GetShapeFromLink_1_1Shape.html</anchorfile>
      <anchor>a5b52ba705bd2cbff2d8ba9a1fb0b39d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Shape&lt; PolicyT, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1Shape.html</filename>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Shape</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1Shape.html</anchorfile>
      <anchor>a396c8e881ccf475a065aecce426f9796</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ShapeFrameSemantics</name>
    <filename>classignition_1_1physics_1_1ShapeFrameSemantics.html</filename>
    <base virtualness="virtual">ignition::physics::FrameSemantics</base>
    <member kind="typedef">
      <type>FrameSemantics::Frame&lt; Policy, Features &gt;</type>
      <name>Shape</name>
      <anchorfile>classignition_1_1physics_1_1ShapeFrameSemantics.html</anchorfile>
      <anchor>a7fb3679a10699eb95d92c803d73f6fb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SpecifyData</name>
    <filename>classignition_1_1physics_1_1SpecifyData.html</filename>
    <templarg>Specifications</templarg>
  </compound>
  <compound kind="class">
    <name>ignition::physics::SetSphereShapeProperties::SphereShape</name>
    <filename>classignition_1_1physics_1_1SetSphereShapeProperties_1_1SphereShape.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1SetSphereShapeProperties_1_1SphereShape.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classignition_1_1physics_1_1SetSphereShapeProperties_1_1SphereShape.html</anchorfile>
      <anchor>a41f32de570ba724b4c28d8aaec36f06f</anchor>
      <arglist>(Scalar _radius)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::TimeStep</name>
    <filename>structignition_1_1physics_1_1TimeStep.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structignition_1_1physics_1_1TimeStep.html</anchorfile>
      <anchor>a03e28be41881b703c836edbfe9b51b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::type</name>
    <filename>structignition_1_1physics_1_1type.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::VelocityControlCommands</name>
    <filename>structignition_1_1physics_1_1VelocityControlCommands.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1VelocityControlCommands.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GeneralizedParameters &gt;</type>
      <name>commands</name>
      <anchorfile>structignition_1_1physics_1_1VelocityControlCommands.html</anchorfile>
      <anchor>aeb6a13cd37b311d7c34d6ee052b971fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::dartsim::RetrieveWorld::World</name>
    <filename>classignition_1_1physics_1_1dartsim_1_1RetrieveWorld_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>dart::simulation::WorldPtr</type>
      <name>GetDartsimWorld</name>
      <anchorfile>classignition_1_1physics_1_1dartsim_1_1RetrieveWorld_1_1World.html</anchorfile>
      <anchor>a30a856124950fdabd31b48d216e39a2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::Feature::World</name>
    <filename>classignition_1_1physics_1_1Feature_1_1World.html</filename>
    <templarg>Policy</templarg>
    <templarg>FeaturesT</templarg>
    <base virtualness="virtual">Entity&lt; Policy, FeaturesT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~World</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1World.html</anchorfile>
      <anchor>ac6487368250040812863aaddb2d67c1e</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::RemoveModelFromWorld::World</name>
    <filename>classignition_1_1physics_1_1RemoveModelFromWorld_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>RemoveModel</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1World.html</anchorfile>
      <anchor>af4d05cdaffe94d4507edb533a9b389b7</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RemoveModel</name>
      <anchorfile>classignition_1_1physics_1_1RemoveModelFromWorld_1_1World.html</anchorfile>
      <anchor>aa274a20148e35961c36c4b440747db74</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetContactsFromLastStepFeature::World</name>
    <filename>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <class kind="struct">ignition::physics::GetContactsFromLastStepFeature::World::ContactPoint</class>
    <member kind="typedef">
      <type>SpecifyData&lt; RequireData&lt; ContactPoint &gt;, ExpectData&lt; ExtraContactData &gt; &gt;</type>
      <name>Contact</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</anchorfile>
      <anchor>a7b6ae7d067039e4d806785939964373b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExtraContactDataT&lt; PolicyT &gt;</type>
      <name>ExtraContactData</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</anchorfile>
      <anchor>ab7e8411ea838a764a69e5d9cf3630fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PolicyT::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</anchorfile>
      <anchor>a425d6b0d2c345e02ed753f0a2e55d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ShapePtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</anchorfile>
      <anchor>abf38c7bcbbab8369c6155f0861bfc012</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FromPolicy&lt; PolicyT &gt;::template Use&lt; Vector &gt;</type>
      <name>VectorType</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</anchorfile>
      <anchor>a63c169a83d7bc9d4a89660ffd940a2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Contact &gt;</type>
      <name>GetContactsFromLastStep</name>
      <anchorfile>classignition_1_1physics_1_1GetContactsFromLastStepFeature_1_1World.html</anchorfile>
      <anchor>a946c769f2ba9bcfdf879cc8c6d42831c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ForwardStep::World</name>
    <filename>classignition_1_1physics_1_1ForwardStep_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>Step</name>
      <anchorfile>classignition_1_1physics_1_1ForwardStep_1_1World.html</anchorfile>
      <anchor>a01fb61495d2eeda972a16814cc899cd0</anchor>
      <arglist>(Output &amp;_h, State &amp;_x, const Input &amp;_u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetModelFromWorld::World</name>
    <filename>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>a9df111f6ac6b06b4dc462af88c1111ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>a57586216af8e47a3c14d590854d7a00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>ad17afaa22d3df4e5d287f5018ba06d19</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>ConstModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>a95150d13c8ac0ab8bc110873a2c61bf6</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>ModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>ade515b547693c00706dc7f60c0cc3192</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>ConstModelPtrType</type>
      <name>GetModel</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>a268f65b316f36b8ec86e74475a541046</anchor>
      <arglist>(const std::string &amp;_name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetModelCount</name>
      <anchorfile>classignition_1_1physics_1_1GetModelFromWorld_1_1World.html</anchorfile>
      <anchor>a9b87d83703a67ed02d439464f4d0b818</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::sdf::ConstructSdfModel::World</name>
    <filename>classignition_1_1physics_1_1sdf_1_1ConstructSdfModel_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfModel_1_1World.html</anchorfile>
      <anchor>a57586216af8e47a3c14d590854d7a00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ModelPtrType</type>
      <name>ConstructModel</name>
      <anchorfile>classignition_1_1physics_1_1sdf_1_1ConstructSdfModel_1_1World.html</anchorfile>
      <anchor>a0d71c2496c47a1fc3c44f9e65ec52a4f</anchor>
      <arglist>(const ::sdf::Model &amp;_model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::GetWorldFromEngine::World</name>
    <filename>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ConstEnginePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ConstEnginePtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</anchorfile>
      <anchor>a8634c36f6dc3eb3301d1c3d2ec2cd2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EnginePtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>EnginePtrType</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</anchorfile>
      <anchor>ac3f84ee9b15f47f2312c0ecbb93739c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EnginePtrType</type>
      <name>GetEngine</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</anchorfile>
      <anchor>a0d4660e8cd5588933f93d33f496c9041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstEnginePtrType</type>
      <name>GetEngine</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</anchorfile>
      <anchor>acb869c8cae6ede84b0405a623b506637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>GetIndex</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</anchorfile>
      <anchor>abfce090b7cf2b45d19a5c4e7e28e6f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetName</name>
      <anchorfile>classignition_1_1physics_1_1GetWorldFromEngine_1_1World.html</anchorfile>
      <anchor>a5b52ba705bd2cbff2d8ba9a1fb0b39d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ignition::physics::ConstructEmptyModelFeature::World</name>
    <filename>classignition_1_1physics_1_1ConstructEmptyModelFeature_1_1World.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">World&lt; PolicyT, FeaturesT &gt;</base>
    <member kind="typedef">
      <type>ModelPtr&lt; PolicyT, FeaturesT &gt;</type>
      <name>ModelPtrType</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyModelFeature_1_1World.html</anchorfile>
      <anchor>a57586216af8e47a3c14d590854d7a00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ModelPtrType</type>
      <name>ConstructEmptyModel</name>
      <anchorfile>classignition_1_1physics_1_1ConstructEmptyModelFeature_1_1World.html</anchorfile>
      <anchor>ad0486fd4f4d8e725098e83a3ffcd8b3f</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>World&lt; PolicyT, FeaturesT &gt;</name>
    <filename>classignition_1_1physics_1_1Feature_1_1World.html</filename>
    <base virtualness="virtual">ignition::physics::Entity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~World</name>
      <anchorfile>classignition_1_1physics_1_1Feature_1_1World.html</anchorfile>
      <anchor>ac6487368250040812863aaddb2d67c1e</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::WorldPose</name>
    <filename>structignition_1_1physics_1_1WorldPose.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>body</name>
      <anchorfile>structignition_1_1physics_1_1WorldPose.html</anchorfile>
      <anchor>a5eb983a1828f291de2902b3de5ff7958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ignition::math::Pose3d</type>
      <name>pose</name>
      <anchorfile>structignition_1_1physics_1_1WorldPose.html</anchorfile>
      <anchor>a0fa0526f60dd0d221e37f32ccc43ff3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::WorldPoses</name>
    <filename>structignition_1_1physics_1_1WorldPoses.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>annotation</name>
      <anchorfile>structignition_1_1physics_1_1WorldPoses.html</anchorfile>
      <anchor>ad25fd12f25e079ce4a3ab65645a92ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; WorldPose &gt;</type>
      <name>entries</name>
      <anchorfile>structignition_1_1physics_1_1WorldPoses.html</anchorfile>
      <anchor>af5f538942da07f134afe3bbab18e9d14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ignition::physics::WriteOptions</name>
    <filename>structignition_1_1physics_1_1WriteOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>WriteOptions</name>
      <anchorfile>structignition_1_1physics_1_1WriteOptions.html</anchorfile>
      <anchor>a0e54c910e2cd4776f025492c06b530c5</anchor>
      <arglist>(const bool _skipMissing=false, const bool _onlyUnqueried=true)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyWriteUnqueriedData</name>
      <anchorfile>structignition_1_1physics_1_1WriteOptions.html</anchorfile>
      <anchor>a2c71272a1cb454f202ed093d1f9f7cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>skipMissingData</name>
      <anchorfile>structignition_1_1physics_1_1WriteOptions.html</anchorfile>
      <anchor>aa7b3531c0909a30efcec1f3510997d7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ignition</name>
    <filename>namespaceignition.html</filename>
    <namespace>ignition::physics</namespace>
  </compound>
  <compound kind="namespace">
    <name>ignition::physics</name>
    <filename>namespaceignition_1_1physics.html</filename>
    <namespace>ignition::physics::dartsim</namespace>
    <namespace>ignition::physics::mesh</namespace>
    <namespace>ignition::physics::sdf</namespace>
    <class kind="class">ignition::physics::AddLinkExternalForceTorque</class>
    <class kind="struct">ignition::physics::ApplyExternalForceTorques</class>
    <class kind="struct">ignition::physics::ApplyGeneralizedForces</class>
    <class kind="class">ignition::physics::AttachBoxShapeFeature</class>
    <class kind="class">ignition::physics::AttachCylinderShapeFeature</class>
    <class kind="class">ignition::physics::AttachPlaneShapeFeature</class>
    <class kind="class">ignition::physics::AttachPrismaticJointFeature</class>
    <class kind="class">ignition::physics::AttachRevoluteJointFeature</class>
    <class kind="class">ignition::physics::AttachSphereShapeFeature</class>
    <class kind="class">ignition::physics::CanReadExpectedData</class>
    <class kind="class">ignition::physics::CanReadRequiredData</class>
    <class kind="class">ignition::physics::CanWriteExpectedData</class>
    <class kind="class">ignition::physics::CanWriteRequiredData</class>
    <class kind="class">ignition::physics::CollisionFilterMaskFeature</class>
    <class kind="class">ignition::physics::CompleteFrameSemantics</class>
    <class kind="class">ignition::physics::CompositeData</class>
    <class kind="struct">ignition::physics::ConstCompatible</class>
    <class kind="struct">ignition::physics::ConstCompatible&lt; To, const From &gt;</class>
    <class kind="class">ignition::physics::ConstructEmptyLinkFeature</class>
    <class kind="class">ignition::physics::ConstructEmptyModelFeature</class>
    <class kind="class">ignition::physics::ConstructEmptyWorldFeature</class>
    <class kind="struct">ignition::physics::Contacts</class>
    <class kind="struct">ignition::physics::DataStatusMask</class>
    <class kind="class">ignition::physics::DetachJointFeature</class>
    <class kind="struct">ignition::physics::Empty</class>
    <class kind="class">ignition::physics::Entity</class>
    <class kind="class">ignition::physics::EntityPtr</class>
    <class kind="class">ignition::physics::ExpectData&lt; Expected &gt;</class>
    <class kind="class">ignition::physics::Feature</class>
    <class kind="struct">ignition::physics::FeatureList</class>
    <class kind="struct">ignition::physics::FeaturePolicy</class>
    <class kind="struct">ignition::physics::FeatureWithConflicts</class>
    <class kind="struct">ignition::physics::FeatureWithRequirements</class>
    <class kind="struct">ignition::physics::FindExpected</class>
    <class kind="struct">ignition::physics::FindFeatures</class>
    <class kind="struct">ignition::physics::FindRequired</class>
    <class kind="struct">ignition::physics::ForceTorque</class>
    <class kind="class">ignition::physics::ForwardStep</class>
    <class kind="struct">ignition::physics::FrameData</class>
    <class kind="class">ignition::physics::FrameID</class>
    <class kind="class">ignition::physics::FrameSemantics</class>
    <class kind="class">ignition::physics::FreeGroupFrameSemantics</class>
    <class kind="struct">ignition::physics::FreeVector</class>
    <class kind="struct">ignition::physics::FromPolicy</class>
    <class kind="struct">ignition::physics::GeneralizedParameters</class>
    <class kind="class">ignition::physics::GetBasicJointProperties</class>
    <class kind="class">ignition::physics::GetBasicJointState</class>
    <class kind="class">ignition::physics::GetContactsFromLastStepFeature</class>
    <class kind="class">ignition::physics::GetEngineInfo</class>
    <class kind="struct">ignition::physics::GetEntities</class>
    <class kind="class">ignition::physics::GetJointFromModel</class>
    <class kind="class">ignition::physics::GetLinkBoundingBox</class>
    <class kind="class">ignition::physics::GetLinkFromModel</class>
    <class kind="class">ignition::physics::GetModelBoundingBox</class>
    <class kind="class">ignition::physics::GetModelFromWorld</class>
    <class kind="class">ignition::physics::GetShapeBoundingBox</class>
    <class kind="class">ignition::physics::GetShapeCollisionProperties</class>
    <class kind="class">ignition::physics::GetShapeFromLink</class>
    <class kind="class">ignition::physics::GetShapeKinematicProperties</class>
    <class kind="class">ignition::physics::GetWorldFromEngine</class>
    <class kind="struct">ignition::physics::IsExpectedBy</class>
    <class kind="struct">ignition::physics::IsRequiredBy</class>
    <class kind="class">ignition::physics::JointFrameSemantics</class>
    <class kind="struct">ignition::physics::JointPositions</class>
    <class kind="class">ignition::physics::LinkFrameSemantics</class>
    <class kind="class">ignition::physics::ModelFrameSemantics</class>
    <class kind="class">ignition::physics::OperateOnSpecifiedData</class>
    <class kind="struct">ignition::physics::PIDValues</class>
    <class kind="struct">ignition::physics::Point</class>
    <class kind="struct">ignition::physics::ReadOptions</class>
    <class kind="class">ignition::physics::RelativeQuantity</class>
    <class kind="class">ignition::physics::RemoveModelFromWorld</class>
    <class kind="struct">ignition::physics::RequestEngine</class>
    <class kind="struct">ignition::physics::RequestFeatures</class>
    <class kind="class">ignition::physics::RequireData&lt; Required &gt;</class>
    <class kind="struct">ignition::physics::ServoControlCommands</class>
    <class kind="class">ignition::physics::SetBasicJointState</class>
    <class kind="class">ignition::physics::SetBoxShapeProperties</class>
    <class kind="class">ignition::physics::SetCylinderShapeProperties</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldPose</class>
    <class kind="class">ignition::physics::SetFreeGroupWorldVelocity</class>
    <class kind="class">ignition::physics::SetJointTransformFromParentFeature</class>
    <class kind="class">ignition::physics::SetJointTransformToChildFeature</class>
    <class kind="class">ignition::physics::SetJointVelocityCommandFeature</class>
    <class kind="class">ignition::physics::SetPlaneShapeProperties</class>
    <class kind="class">ignition::physics::SetPrismaticJointProperties</class>
    <class kind="class">ignition::physics::SetRevoluteJointProperties</class>
    <class kind="class">ignition::physics::SetShapeCollisionProperties</class>
    <class kind="class">ignition::physics::SetShapeKinematicProperties</class>
    <class kind="class">ignition::physics::SetSphereShapeProperties</class>
    <class kind="class">ignition::physics::ShapeFrameSemantics</class>
    <class kind="class">ignition::physics::SpecifyData</class>
    <class kind="struct">ignition::physics::TimeStep</class>
    <class kind="struct">ignition::physics::type</class>
    <class kind="struct">ignition::physics::VelocityControlCommands</class>
    <class kind="struct">ignition::physics::WorldPose</class>
    <class kind="struct">ignition::physics::WorldPoses</class>
    <class kind="struct">ignition::physics::WriteOptions</class>
    <member kind="typedef">
      <type>Eigen::AlignedBox&lt; Scalar, Dim &gt;</type>
      <name>AlignedBox</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aabdb046f916193a8bf05c96e5dc66345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 2 &gt;</type>
      <name>AlignedBox2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ac682344c3c020883aa86b5556e2e8379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 2 &gt;</type>
      <name>AlignedBox2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a8111560db08383ed8cc6b4fbed09fd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 3 &gt;</type>
      <name>AlignedBox3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aa67a31d586dee3418718784aca5e6e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 3 &gt;</type>
      <name>AlignedBox3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae04e40fdf427014257f71fd9b75160ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Scalar,(Dim *(Dim-1))/2 &gt;</type>
      <name>AngularVector</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ab4060336133c468fbfa25c6498fe65d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; double, 2 &gt;</type>
      <name>AngularVector2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a3ab40bedaae7138f210723b6cc94f1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; float, 2 &gt;</type>
      <name>AngularVector2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ab32845b11f09464d7edc5338c4a9956f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; double, 3 &gt;</type>
      <name>AngularVector3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a8fe04e039fb41916136883b26a803e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularVector&lt; float, 3 &gt;</type>
      <name>AngularVector3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aeaacb19c1583816b998825e9c0621b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; double, 2 &gt;</type>
      <name>FeaturePolicy2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7cd42d0635def62ac0d7715f1cb1c9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; float, 2 &gt;</type>
      <name>FeaturePolicy2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a1094ed03fe553cec0b27adbdac6fbe0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; double, 3 &gt;</type>
      <name>FeaturePolicy3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7f245b484b6675dbb78f5b1aa68790b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeaturePolicy&lt; float, 3 &gt;</type>
      <name>FeaturePolicy3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae1e75047af2f607c9f079eaef6496351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy2d, FeatureListT &gt;</type>
      <name>FindFeatures2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a18644628a59c115ad11d8e14619f55b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy2f, FeatureListT &gt;</type>
      <name>FindFeatures2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>afc7adb1b82e6f20e8d47ba9953704257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy3d, FeatureListT &gt;</type>
      <name>FindFeatures3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2acb7c46a3861eabf318669f4267b1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FindFeatures&lt; FeaturePolicy3f, FeatureListT &gt;</type>
      <name>FindFeatures3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ac56231e72971f43e72b8c39968873009</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeatureList&lt; GetShapeBoundingBox, GetShapeFromLink, LinkFrameSemantics &gt;</type>
      <name>GetLinkBoundingBoxRequiredFeatures</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5d7c9b11e673f739dd3e7c4bb2925073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeatureList&lt; GetLinkBoundingBox, GetLinkFromModel, ModelFrameSemantics &gt;</type>
      <name>GetModelBoundingBoxRequiredFeatures</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae3ce83244250e9ee81bb60ed40072b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::ExtractImplementation&lt; PolicyT, FeatureListT &gt;</type>
      <name>Implements</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2d96f4e9c1426d8a61da147434b61d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy2d, FeatureListT &gt;</type>
      <name>Implements2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a25e9a4891662ae646a5a6a039ed01298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy2f, FeatureListT &gt;</type>
      <name>Implements2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a12f903b422a017c8649917ff2ec6b3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy3d, FeatureListT &gt;</type>
      <name>Implements3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a6d38e59cc9ee7d1edeb9af2205aac83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implements&lt; FeaturePolicy3f, FeatureListT &gt;</type>
      <name>Implements3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a8d5b4a97a1a1e5f69c4f286f7cd95d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Scalar, Dim &gt;</type>
      <name>LinearVector</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a0691de79072243de2344d7130dc4d0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; double, 2 &gt;</type>
      <name>LinearVector2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7f1a85b1333ccb3cfda0f4e47a38f42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; float, 2 &gt;</type>
      <name>LinearVector2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a43fcc183038b8ca280a3714dc5e4f043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; double, 3 &gt;</type>
      <name>LinearVector3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ad5ed379816e97817c1814790a9155b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVector&lt; float, 3 &gt;</type>
      <name>LinearVector3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a81f09df5f47bb2cbbb702f869a9a0e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Transform&lt; Scalar, Dim, Eigen::Isometry &gt;</type>
      <name>Pose</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7dc8ee1191001fe2671afbf62ff4b4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; double, 2 &gt;</type>
      <name>Pose2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a568326d1dd4ae14bcf25889d2bdb1631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; float, 2 &gt;</type>
      <name>Pose2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aaf987914b31e82106cfa5a7d75fd0a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; double, 3 &gt;</type>
      <name>Pose3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a4c0a0ae91e6f6974863d4b31ff798d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose&lt; float, 3 &gt;</type>
      <name>Pose3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae4735c9b393853eb1335dc87d86fc82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; AlignedBox&lt; Scalar, Dim &gt;, Dim, detail::AABBSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativeAlignedBox</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2f019b8d20b66b71c0e7022f9205ee03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; LinearVector&lt; Scalar, Dim &gt;, Dim, detail::VectorSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativeForce</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5990c116035c799fb66eb8163bf0abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; FrameData&lt; Scalar, Dim &gt;, Dim, detail::FrameSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativeFrameData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2f59bd53dab678e9c842e20237b8a0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; Pose&lt; Scalar, Dim &gt;, Dim, detail::SESpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativePose</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>afead8dc9356f30a639d52b74045c4168</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; LinearVector&lt; Scalar, Dim &gt;, Dim, detail::EuclideanSpace&lt; Scalar, Dim &gt; &gt;</type>
      <name>RelativePosition</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5d84d3565d1c139ef85cf753049fca2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuaternion&lt; double &gt;</type>
      <name>RelativeQuaterniond</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a09e13c8343225b21cc0dd8d392fb0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuaternion&lt; float &gt;</type>
      <name>RelativeQuaternionf</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a3feb9be9d32212270e38a7f82c947ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; Eigen::Matrix&lt; Scalar, Dim, Dim &gt;, Dim, detail::SOSpace&lt; Scalar, Dim, Eigen::Matrix&lt; Scalar, Dim, Dim &gt; &gt;&gt;</type>
      <name>RelativeRotationMatrix</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a9399f0198f42993c872b8d2198391eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RelativeQuantity&lt; AngularVector&lt; Scalar, Dim &gt;, Dim, detail::VectorSpace&lt; Scalar,(Dim *(Dim-1))/2 &gt; &gt;</type>
      <name>RelativeTorque</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a727871ed79f3ecac727b77dcc4a9f02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeatureList&lt; RemoveModelFromWorld &gt;</type>
      <name>RemoveEntities</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aab44889c286b86cc49fbc76fa583be28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy2d, FeatureList &gt;</type>
      <name>RequestEngine2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>addea1ed9b2d4cc0c918d9ad75055c43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy2f, FeatureList &gt;</type>
      <name>RequestEngine2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a301637e26a0eba63dd1a7b772f8d1b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy3d, FeatureList &gt;</type>
      <name>RequestEngine3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a63d29b99afb86d9d60d535ec05941d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestEngine&lt; FeaturePolicy3f, FeatureList &gt;</type>
      <name>RequestEngine3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a62cb1cbf94ee51dc797d8aff2fdd8989</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>Vector</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7daf55236ee43a9936138efa7ef99efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; double, 2 &gt;</type>
      <name>Vector2d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a655a98477c685806cfb2d16fa39f25e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; float, 2 &gt;</type>
      <name>Vector2f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ad22adf6f757c85af1be5f78430137648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; double, 3 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a9e26d86ebadc4c4a3ac350153ca1a739</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; float, 3 &gt;</type>
      <name>Vector3f</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a208fc8e24bbd504517d365e91a99bece</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ab8ddf9531fc4ac7ce28574db20c8f20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>CountUpperLimitOfExpectedData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ae18287825f53bd2c71c51f4c248591c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>CountUpperLimitOfRequiredData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5d180e38b448d9fe9d82ffe072902d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>CountUpperLimitOfSpecifiedData</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a9892e9cab92e56839d95c58b60410f23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_JOINT_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>adbf43bc07f35927a8f022e1dc0e5a3ba</anchor>
      <arglist>(FixedJoint) class AttachFixedJointFeature</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a0a25a29f2326fdac9aea5bc5d3c53715</anchor>
      <arglist>(PlaneShape) class GetPlaneShapeProperties</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aeb27d6bfbb7f3f282190045caf1376bb</anchor>
      <arglist>(SphereShape) class GetSphereShapeProperties</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a319475aed38337d9a14000b4d6abaf34</anchor>
      <arglist>(CylinderShape) class GetCylinderShapeProperties</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>aa7af3458cc3adaeee0f4e52827ac935d</anchor>
      <arglist>(BoxShape) class GetBoxShapeProperties</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a17ccd61faa5df353d2077d232e68f790</anchor>
      <arglist>(FrameData) template&lt; typename Scalar</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a2964310d2053413be3ed55f936545697</anchor>
      <arglist>(RelativePose) template&lt; typename Scalar</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a3b86091601e395732378f9c81010334d</anchor>
      <arglist>(RelativeRotationMatrix) template&lt; typename Scalar &gt; using RelativeQuaternion</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_MAKE_ALL_TYPE_COMBOS</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a7c93ff34702da4a466ec504c9607cb41</anchor>
      <arglist>(RelativeTorque) template&lt; typename Scalar</arglist>
    </member>
    <member kind="function">
      <type>std::size_t Dim std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a6bb190b563861a9f47187e5e2a668a68</anchor>
      <arglist>(std::ostream &amp;stream, const FrameData&lt; Scalar, Dim &gt; &amp;_frame)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>ad79fb47ab6cd23e24b5644c824fdd391</anchor>
      <arglist>(std::ostream &amp;stream, const RelativeQuantity&lt; Q, Dim, CoordinateSpace &gt; &amp;_fq)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2D&lt; Scalar &gt;</type>
      <name>Rotate</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a80d56f7c1246f8bcba606357bf0ca83c</anchor>
      <arglist>(const Scalar &amp;_angle, const AngularVector&lt; Scalar, 2 &gt; &amp;_axis)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::AngleAxis&lt; Scalar &gt;</type>
      <name>Rotate</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a61ee8362b4dde5bff841283d2a1f1709</anchor>
      <arglist>(const Scalar &amp;_angle, const AngularVector&lt; Scalar, 3 &gt; &amp;_axis)</arglist>
    </member>
    <member kind="variable">
      <type>const std::size_t</type>
      <name>INVALID_ENTITY_ID</name>
      <anchorfile>namespaceignition_1_1physics.html</anchorfile>
      <anchor>a5bb1ac88b5af298f6c217de8f8ce2251</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ignition::physics::dartsim</name>
    <filename>namespaceignition_1_1physics_1_1dartsim.html</filename>
    <class kind="class">ignition::physics::dartsim::RetrieveWorld</class>
  </compound>
  <compound kind="namespace">
    <name>ignition::physics::mesh</name>
    <filename>namespaceignition_1_1physics_1_1mesh.html</filename>
    <class kind="class">ignition::physics::mesh::AttachMeshShapeFeature</class>
    <class kind="class">ignition::physics::mesh::SetMeshShapeProperties</class>
    <member kind="function">
      <type></type>
      <name>IGN_PHYSICS_DECLARE_SHAPE_TYPE</name>
      <anchorfile>namespaceignition_1_1physics_1_1mesh.html</anchorfile>
      <anchor>a28c06347369c712fbf97eac04a789a4d</anchor>
      <arglist>(MeshShape) class GetMeshShapeProperties</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ignition::physics::sdf</name>
    <filename>namespaceignition_1_1physics_1_1sdf.html</filename>
    <class kind="class">ignition::physics::sdf::ConstructSdfCollision</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfJoint</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfLink</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfModel</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfVisual</class>
    <class kind="class">ignition::physics::sdf::ConstructSdfWorld</class>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
  </compound>
</tagfile>
